{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arh05\\\\AWS2_GIOT_FULL\\\\frontend\\\\src\\\\pages\\\\Transition\\\\TransitionScreen.tsx\",\n  _s = $RefreshSig$();\n// TransitionScreen.tsx - 전환 로딩 화면 컴포넌트\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { TransitionAPI, TransitionUtils } from '../../services/TransitionTypes';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// 배경 기하학적 패턴 컴포넌트\nconst TransitionGeometricBackground = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"transitionGeometricBackground\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transitionGeometricShape transitionHexagon1\",\n    style: {\n      '--rotate': '25deg'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transitionGeometricShape transitionHexagon2\",\n    style: {\n      '--rotate': '-20deg'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transitionGeometricShape transitionHexagon3\",\n    style: {\n      '--rotate': '40deg'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transitionGeometricShape transitionHexagon4\",\n    style: {\n      '--rotate': '-35deg'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transitionGeometricShape transitionCenterHexagon\",\n    style: {\n      '--rotate': '0deg'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transitionGeometricShape transitionLinePattern1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transitionGeometricShape transitionLinePattern2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n_c = TransitionGeometricBackground;\nconst TransitionScreen = ({\n  targetRole = 'admin',\n  onTransitionComplete\n}) => {\n  _s();\n  const [transitionState, setTransitionState] = useState({\n    isTransitioning: true,\n    isLoading: true,\n    isReady: false,\n    progress: 0,\n    arrowOpacity: 0.4,\n    targetRole,\n    error: null,\n    showRetryButton: false,\n    nextPage: '/dashboard'\n  });\n  const [isFadingOut, setIsFadingOut] = useState(false);\n\n  // 진행률 증가 애니메이션\n  const startProgressAnimation = useCallback(() => {\n    let currentProgress = 0;\n    const progressInterval = setInterval(() => {\n      currentProgress += Math.random() * 12 + 8; // 8-20씩 증가 (빠른 전환)\n\n      if (currentProgress >= 100) {\n        currentProgress = 100;\n        clearInterval(progressInterval);\n      }\n      const arrowOpacity = TransitionUtils.calculateArrowOpacity(currentProgress);\n      setTransitionState(prev => ({\n        ...prev,\n        progress: currentProgress,\n        arrowOpacity\n      }));\n    }, 120); // 120ms마다 업데이트 (빠른 애니메이션)\n\n    return progressInterval;\n  }, []);\n\n  // 전환 초기화\n  const initializeTransition = useCallback(async () => {\n    try {\n      // 중복 실행 방지 체크\n      if (TransitionUtils.checkTransitionFlag()) {\n        console.log('전환이 이미 진행 중입니다.');\n        return;\n      }\n\n      // 전환 플래그 설정\n      TransitionUtils.setTransitionFlag();\n      setTransitionState(prev => ({\n        ...prev,\n        isTransitioning: true,\n        error: null,\n        showRetryButton: false\n      }));\n\n      // 진행률 애니메이션 시작\n      const progressInterval = startProgressAnimation();\n\n      // API 호출 (개발 시에는 목 데이터 사용)\n      const response = await TransitionAPI.generateMockResponse(targetRole); // 실제로는 TransitionAPI.prepareTransition(targetRole) 사용\n\n      // 타입 가드로 응답 확인\n      if ('status' in response) {\n        const transitionResponse = response;\n        if (transitionResponse.status === 'transition_ready') {\n          setTransitionState(prev => ({\n            ...prev,\n            nextPage: transitionResponse.nextPage\n          }));\n\n          // 진행률 100% 완료까지 대기\n          const checkProgress = () => {\n            setTransitionState(current => {\n              if (current.progress >= 100) {\n                // 완료 후 잠시 대기 후 전환\n                setTimeout(() => {\n                  handleTransitionComplete();\n                }, 300);\n                return current;\n              }\n              // 아직 100%가 아니면 다시 체크\n              setTimeout(checkProgress, 100);\n              return current;\n            });\n          };\n          checkProgress();\n        }\n      } else {\n        // 에러 응답 처리\n        const errorResponse = response;\n        throw new Error(errorResponse.message);\n      }\n\n      // 진행률 애니메이션 정리\n      clearInterval(progressInterval);\n    } catch (error) {\n      console.error('전환 초기화 실패:', error);\n      setTransitionState(prev => ({\n        ...prev,\n        isTransitioning: false,\n        error: error instanceof Error ? error.message : '전환 중 문제가 발생했습니다.',\n        showRetryButton: true\n      }));\n\n      // 전환 플래그 초기화\n      TransitionUtils.clearTransitionFlag();\n    }\n  }, [targetRole, startProgressAnimation]);\n\n  // 전환 완료 처리\n  const handleTransitionComplete = useCallback(() => {\n    setIsFadingOut(true);\n\n    // 페이드 아웃 애니메이션 후 전환\n    setTimeout(() => {\n      TransitionUtils.clearTransitionFlag();\n      onTransitionComplete();\n    }, 800);\n  }, [onTransitionComplete]);\n\n  // 재시도 핸들러\n  const handleRetry = useCallback(() => {\n    TransitionUtils.clearTransitionFlag();\n    setTransitionState({\n      isTransitioning: true,\n      isLoading: true,\n      isReady: false,\n      progress: 0,\n      arrowOpacity: 0.4,\n      targetRole,\n      error: null,\n      showRetryButton: false,\n      nextPage: '/dashboard'\n    });\n    initializeTransition();\n  }, [targetRole, initializeTransition]);\n\n  // 컴포넌트 마운트 시 초기화 시작\n  useEffect(() => {\n    initializeTransition();\n  }, [initializeTransition]);\n\n  // 5초 타임아웃 처리\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (transitionState.isTransitioning && !transitionState.error) {\n        setTransitionState(prev => ({\n          ...prev,\n          isTransitioning: false,\n          error: '전환 중 문제가 발생했습니다. 다시 시도해주세요.',\n          showRetryButton: true\n        }));\n        TransitionUtils.clearTransitionFlag();\n      }\n    }, 5000);\n    return () => clearTimeout(timeoutId);\n  }, [transitionState.isTransitioning, transitionState.error]);\n\n  // 2초 강제 전환 타이머\n  useEffect(() => {\n    const fallbackTimeout = setTimeout(() => {\n      if (transitionState.isTransitioning && !transitionState.error) {\n        handleTransitionComplete();\n      }\n    }, 2000);\n    return () => clearTimeout(fallbackTimeout);\n  }, [transitionState.isTransitioning, transitionState.error, handleTransitionComplete]);\n\n  // 애니메이션 단계 계산\n  const animationStage = TransitionUtils.getAnimationStage(transitionState.progress);\n  const arrowStageClass = `transitionArrowStage${animationStage === 'start' ? '1' : animationStage === 'middle' ? '2' : animationStage === 'intense' ? '3' : 'Complete'}`;\n\n  // 진행률에 따른 상태 메시지\n  const getStatusMessage = () => {\n    if (transitionState.progress < 30) {\n      return '권한을 확인하고 있습니다...';\n    } else if (transitionState.progress < 60) {\n      return '리소스를 로딩하고 있습니다...';\n    } else if (transitionState.progress < 90) {\n      return '초기화를 완료하고 있습니다...';\n    } else {\n      return '준비가 완료되었습니다!';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `transitionContainer ${isFadingOut ? 'fadeOut' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(TransitionGeometricBackground, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), transitionState.error ?\n    /*#__PURE__*/\n    // 에러 상태\n    _jsxDEV(\"div\", {\n      className: \"transitionErrorContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transitionErrorTitle\",\n        children: \"\\uC804\\uD658 \\uC2E4\\uD328\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transitionErrorMessage\",\n        children: transitionState.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), transitionState.showRetryButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"transitionRetryButton\",\n        onClick: handleRetry,\n        children: \"\\uB2E4\\uC2DC \\uC2DC\\uB3C4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // 정상 전환 상태\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transitionLogoContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transitionLogoText\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transitionLogoMain\",\n            children: \"AWS\\xB2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transitionLogoAccent\",\n            children: \"GIoT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transitionLogoSubtext\",\n          children: \"Air Watch System\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `transitionArrowContainer ${arrowStageClass}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transitionArrow\",\n          style: {\n            opacity: transitionState.arrowOpacity\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transitionArrowHead\",\n            style: {\n              opacity: transitionState.arrowOpacity\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transitionStatusContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transitionStatusText\",\n          children: getStatusMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transitionProgressText\",\n          children: [Math.round(transitionState.progress), \"% \\uC644\\uB8CC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transitionCopyright\",\n      children: \"2025 GBSA AWS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(TransitionScreen, \"9Kvn8qknZRkjZ5wXvervYhURWx8=\");\n_c2 = TransitionScreen;\nexport default TransitionScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"TransitionGeometricBackground\");\n$RefreshReg$(_c2, \"TransitionScreen\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","TransitionAPI","TransitionUtils","jsxDEV","_jsxDEV","Fragment","_Fragment","TransitionGeometricBackground","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","TransitionScreen","targetRole","onTransitionComplete","_s","transitionState","setTransitionState","isTransitioning","isLoading","isReady","progress","arrowOpacity","error","showRetryButton","nextPage","isFadingOut","setIsFadingOut","startProgressAnimation","currentProgress","progressInterval","setInterval","Math","random","clearInterval","calculateArrowOpacity","prev","initializeTransition","checkTransitionFlag","console","log","setTransitionFlag","response","generateMockResponse","transitionResponse","status","checkProgress","current","setTimeout","handleTransitionComplete","errorResponse","Error","message","clearTransitionFlag","handleRetry","timeoutId","clearTimeout","fallbackTimeout","animationStage","getAnimationStage","arrowStageClass","getStatusMessage","onClick","opacity","round","_c2","$RefreshReg$"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/pages/Transition/TransitionScreen.tsx"],"sourcesContent":["// TransitionScreen.tsx - 전환 로딩 화면 컴포넌트\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  TransitionState, \r\n  TransitionAPI, \r\n  TransitionUtils,\r\n  TransitionResponse,\r\n  TransitionError\r\n} from '../../services/TransitionTypes';\r\nimport styles from './TransitionScreen.module.css';\r\n\r\ninterface TransitionScreenProps {\r\n  targetRole?: 'admin' | 'user';\r\n  onTransitionComplete: () => void;\r\n}\r\n\r\n// 배경 기하학적 패턴 컴포넌트\r\nconst TransitionGeometricBackground: React.FC = () => (\r\n  <div className=\"transitionGeometricBackground\">\r\n    {/* 육각형들 */}\r\n    <div \r\n      className=\"transitionGeometricShape transitionHexagon1\"\r\n      style={{ '--rotate': '25deg' } as React.CSSProperties}\r\n    />\r\n    <div \r\n      className=\"transitionGeometricShape transitionHexagon2\"\r\n      style={{ '--rotate': '-20deg' } as React.CSSProperties}\r\n    />\r\n    <div \r\n      className=\"transitionGeometricShape transitionHexagon3\"\r\n      style={{ '--rotate': '40deg' } as React.CSSProperties}\r\n    />\r\n    <div \r\n      className=\"transitionGeometricShape transitionHexagon4\"\r\n      style={{ '--rotate': '-35deg' } as React.CSSProperties}\r\n    />\r\n    <div \r\n      className=\"transitionGeometricShape transitionCenterHexagon\"\r\n      style={{ '--rotate': '0deg' } as React.CSSProperties}\r\n    />\r\n    \r\n    {/* 선형 패턴들 */}\r\n    <div className=\"transitionGeometricShape transitionLinePattern1\" />\r\n    <div className=\"transitionGeometricShape transitionLinePattern2\" />\r\n  </div>\r\n);\r\n\r\nconst TransitionScreen: React.FC<TransitionScreenProps> = ({ \r\n  targetRole = 'admin', \r\n  onTransitionComplete \r\n}) => {\r\n  const [transitionState, setTransitionState] = useState<TransitionState>({\r\n    isTransitioning: true,\r\n    isLoading: true,\r\n    isReady: false,\r\n    progress: 0,\r\n    arrowOpacity: 0.4,\r\n    targetRole,\r\n    error: null,\r\n    showRetryButton: false,\r\n    nextPage: '/dashboard'\r\n  });\r\n\r\n  const [isFadingOut, setIsFadingOut] = useState(false);\r\n\r\n  // 진행률 증가 애니메이션\r\n  const startProgressAnimation = useCallback(() => {\r\n    let currentProgress = 0;\r\n    const progressInterval = setInterval(() => {\r\n      currentProgress += Math.random() * 12 + 8; // 8-20씩 증가 (빠른 전환)\r\n      \r\n      if (currentProgress >= 100) {\r\n        currentProgress = 100;\r\n        clearInterval(progressInterval);\r\n      }\r\n      \r\n      const arrowOpacity = TransitionUtils.calculateArrowOpacity(currentProgress);\r\n      \r\n      setTransitionState(prev => ({\r\n        ...prev,\r\n        progress: currentProgress,\r\n        arrowOpacity\r\n      }));\r\n    }, 120); // 120ms마다 업데이트 (빠른 애니메이션)\r\n\r\n    return progressInterval;\r\n  }, []);\r\n\r\n  // 전환 초기화\r\n  const initializeTransition = useCallback(async () => {\r\n    try {\r\n      // 중복 실행 방지 체크\r\n      if (TransitionUtils.checkTransitionFlag()) {\r\n        console.log('전환이 이미 진행 중입니다.');\r\n        return;\r\n      }\r\n\r\n      // 전환 플래그 설정\r\n      TransitionUtils.setTransitionFlag();\r\n\r\n      setTransitionState(prev => ({\r\n        ...prev,\r\n        isTransitioning: true,\r\n        error: null,\r\n        showRetryButton: false\r\n      }));\r\n\r\n      // 진행률 애니메이션 시작\r\n      const progressInterval = startProgressAnimation();\r\n\r\n      // API 호출 (개발 시에는 목 데이터 사용)\r\n      const response = await TransitionAPI.generateMockResponse(targetRole); // 실제로는 TransitionAPI.prepareTransition(targetRole) 사용\r\n      \r\n      // 타입 가드로 응답 확인\r\n      if ('status' in response) {\r\n        const transitionResponse = response as TransitionResponse;\r\n        \r\n        if (transitionResponse.status === 'transition_ready') {\r\n          setTransitionState(prev => ({\r\n            ...prev,\r\n            nextPage: transitionResponse.nextPage\r\n          }));\r\n\r\n          // 진행률 100% 완료까지 대기\r\n          const checkProgress = () => {\r\n            setTransitionState(current => {\r\n              if (current.progress >= 100) {\r\n                // 완료 후 잠시 대기 후 전환\r\n                setTimeout(() => {\r\n                  handleTransitionComplete();\r\n                }, 300);\r\n                return current;\r\n              }\r\n              // 아직 100%가 아니면 다시 체크\r\n              setTimeout(checkProgress, 100);\r\n              return current;\r\n            });\r\n          };\r\n          checkProgress();\r\n        }\r\n      } else {\r\n        // 에러 응답 처리\r\n        const errorResponse = response as TransitionError;\r\n        throw new Error(errorResponse.message);\r\n      }\r\n\r\n      // 진행률 애니메이션 정리\r\n      clearInterval(progressInterval);\r\n      \r\n    } catch (error) {\r\n      console.error('전환 초기화 실패:', error);\r\n      \r\n      setTransitionState(prev => ({\r\n        ...prev,\r\n        isTransitioning: false,\r\n        error: error instanceof Error ? error.message : '전환 중 문제가 발생했습니다.',\r\n        showRetryButton: true\r\n      }));\r\n\r\n      // 전환 플래그 초기화\r\n      TransitionUtils.clearTransitionFlag();\r\n    }\r\n  }, [targetRole, startProgressAnimation]);\r\n\r\n  // 전환 완료 처리\r\n  const handleTransitionComplete = useCallback(() => {\r\n    setIsFadingOut(true);\r\n    \r\n    // 페이드 아웃 애니메이션 후 전환\r\n    setTimeout(() => {\r\n      TransitionUtils.clearTransitionFlag();\r\n      onTransitionComplete();\r\n    }, 800);\r\n  }, [onTransitionComplete]);\r\n\r\n  // 재시도 핸들러\r\n  const handleRetry = useCallback(() => {\r\n    TransitionUtils.clearTransitionFlag();\r\n    setTransitionState({\r\n      isTransitioning: true,\r\n      isLoading: true,\r\n      isReady: false,\r\n      progress: 0,\r\n      arrowOpacity: 0.4,\r\n      targetRole,\r\n      error: null,\r\n      showRetryButton: false,\r\n      nextPage: '/dashboard'\r\n    });\r\n    initializeTransition();\r\n  }, [targetRole, initializeTransition]);\r\n\r\n  // 컴포넌트 마운트 시 초기화 시작\r\n  useEffect(() => {\r\n    initializeTransition();\r\n  }, [initializeTransition]);\r\n\r\n  // 5초 타임아웃 처리\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      if (transitionState.isTransitioning && !transitionState.error) {\r\n        setTransitionState(prev => ({\r\n          ...prev,\r\n          isTransitioning: false,\r\n          error: '전환 중 문제가 발생했습니다. 다시 시도해주세요.',\r\n          showRetryButton: true\r\n        }));\r\n        TransitionUtils.clearTransitionFlag();\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [transitionState.isTransitioning, transitionState.error]);\r\n\r\n  // 2초 강제 전환 타이머\r\n  useEffect(() => {\r\n    const fallbackTimeout = setTimeout(() => {\r\n      if (transitionState.isTransitioning && !transitionState.error) {\r\n        handleTransitionComplete();\r\n      }\r\n    }, 2000);\r\n\r\n    return () => clearTimeout(fallbackTimeout);\r\n  }, [transitionState.isTransitioning, transitionState.error, handleTransitionComplete]);\r\n\r\n  // 애니메이션 단계 계산\r\n  const animationStage = TransitionUtils.getAnimationStage(transitionState.progress);\r\n  const arrowStageClass = `transitionArrowStage${\r\n    animationStage === 'start' ? '1' : \r\n    animationStage === 'middle' ? '2' : \r\n    animationStage === 'intense' ? '3' : 'Complete'\r\n  }`;\r\n\r\n  // 진행률에 따른 상태 메시지\r\n  const getStatusMessage = () => {\r\n    if (transitionState.progress < 30) {\r\n      return '권한을 확인하고 있습니다...';\r\n    } else if (transitionState.progress < 60) {\r\n      return '리소스를 로딩하고 있습니다...';\r\n    } else if (transitionState.progress < 90) {\r\n      return '초기화를 완료하고 있습니다...';\r\n    } else {\r\n      return '준비가 완료되었습니다!';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`transitionContainer ${isFadingOut ? 'fadeOut' : ''}`}>\r\n      {/* 배경 기하학적 패턴 */}\r\n      <TransitionGeometricBackground />\r\n      \r\n      {/* 메인 전환 콘텐츠 */}\r\n      {transitionState.error ? (\r\n        // 에러 상태\r\n        <div className=\"transitionErrorContainer\">\r\n          <div className=\"transitionErrorTitle\">전환 실패</div>\r\n          <div className=\"transitionErrorMessage\">{transitionState.error}</div>\r\n          {transitionState.showRetryButton && (\r\n            <button \r\n              className=\"transitionRetryButton\"\r\n              onClick={handleRetry}\r\n            >\r\n              다시 시도\r\n            </button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        // 정상 전환 상태\r\n        <>\r\n          <div className=\"transitionLogoContainer\">\r\n            <div className=\"transitionLogoText\">\r\n              <div className=\"transitionLogoMain\">AWS²</div>\r\n              <div className=\"transitionLogoAccent\">GIoT</div>\r\n            </div>\r\n            <div className=\"transitionLogoSubtext\">Air Watch System</div>\r\n          </div>\r\n          \r\n          {/* 점점 선명해지는 화살표 */}\r\n          <div className={`transitionArrowContainer ${arrowStageClass}`}>\r\n            <div \r\n              className=\"transitionArrow\"\r\n              style={{ opacity: transitionState.arrowOpacity }}\r\n            >\r\n              <div \r\n                className=\"transitionArrowHead\"\r\n                style={{ opacity: transitionState.arrowOpacity }}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          {/* 상태 메시지 */}\r\n          <div className=\"transitionStatusContainer\">\r\n            <div className=\"transitionStatusText\">\r\n              {getStatusMessage()}\r\n            </div>\r\n            <div className=\"transitionProgressText\">\r\n              {Math.round(transitionState.progress)}% 완료\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n      \r\n      {/* 하단 카피라이트 */}\r\n      <div className=\"transitionCopyright\">\r\n        2025 GBSA AWS\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransitionScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}