{"ast":null,"code":"// RoleTypes.ts - 역할 선택 타입 정의\n\n// 역할 선택 API 클래스\nexport class RoleSelectAPI {\n  // 중복 클릭 방지\n\n  static async selectRole(role) {\n    try {\n      const deviceId = this.getDeviceId();\n      const request = {\n        role,\n        deviceId\n      };\n      const response = await fetch(this.API_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        if (response.status === 500) {\n          throw new Error('server_error');\n        }\n        throw new Error(`HTTP ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('역할 선택 API 오류:', error);\n      if (error instanceof Error) {\n        if (error.message === 'server_error') {\n          return {\n            error: '서버 오류로 역할 선택이 실패했습니다.'\n          };\n        }\n      }\n      return {\n        success: false,\n        message: '네트워크 오류로 역할 선택에 실패했습니다.'\n      };\n    }\n  }\n\n  // 디바이스 ID 생성/가져오기\n  static getDeviceId() {\n    let deviceId = localStorage.getItem('device_id');\n    if (!deviceId) {\n      deviceId = `iot-device-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('device_id', deviceId);\n    }\n    return deviceId;\n  }\n\n  // 개발용 목 응답 생성\n  static generateMockResponse(role) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const redirectPath = role === 'admin' ? '/admin/dashboard' : '/user/dashboard';\n        const message = role === 'admin' ? '관리자 역할로 접속합니다.' : '사용자 역할로 접속합니다.';\n        resolve({\n          success: true,\n          redirect: redirectPath,\n          message\n        });\n      }, 1000 + Math.random() * 1000); // 1-2초 지연\n    });\n  }\n}\n\n// 역할 선택 유틸리티 함수들\nRoleSelectAPI.API_ENDPOINT = '/api/role/select';\nRoleSelectAPI.REQUEST_DELAY = 500;\nexport class RoleSelectUtils {\n  // 1초\n\n  static canProceedWithSelection() {\n    const now = Date.now();\n    if (now - this.lastClickTime < this.DEBOUNCE_DELAY) {\n      return false;\n    }\n    this.lastClickTime = now;\n    return true;\n  }\n\n  // 역할 정보 가져오기\n  static getRoleOptions() {\n    return [{\n      role: 'admin',\n      title: 'Admin',\n      subtitle: 'EX.professor',\n      avatar: '/images/admin-avatar.jpg',\n      // 실제 이미지 경로로 교체\n      redirect: '/admin/dashboard'\n    }, {\n      role: 'user',\n      title: 'User',\n      subtitle: 'EX. student',\n      avatar: '/images/user-avatar.jpg',\n      // 실제 이미지 경로로 교체\n      redirect: '/user/dashboard'\n    }];\n  }\n\n  // 역할에 따른 메시지 생성\n  static getRoleMessage(role) {\n    switch (role) {\n      case 'admin':\n        return '관리자 권한으로 시스템에 접속합니다.';\n      case 'user':\n        return '사용자 권한으로 시스템에 접속합니다.';\n      default:\n        return '시스템에 접속합니다.';\n    }\n  }\n\n  // 역할에 따른 색상 테마 반환\n  static getRoleTheme(role) {\n    switch (role) {\n      case 'admin':\n        return '#1f2937';\n      // 어두운 회색 (관리자)\n      case 'user':\n        return '#fb923c';\n      // 오렌지 (사용자)\n      default:\n        return '#6b7280';\n    }\n  }\n\n  // 에러 메시지 현지화\n  static getLocalizedErrorMessage(error) {\n    const errorMessages = {\n      'invalid_role': '잘못된 역할 정보입니다.',\n      'server_error': '서버 오류로 역할 선택이 실패했습니다.',\n      'network_error': '네트워크 오류로 역할 선택에 실패했습니다.',\n      'session_expired': '세션이 만료되었습니다. 다시 시도해주세요.'\n    };\n    return errorMessages[error] || '알 수 없는 오류가 발생했습니다.';\n  }\n\n  // 세션에 역할 저장\n  static saveSelectedRole(role) {\n    sessionStorage.setItem('selected_role', role);\n    sessionStorage.setItem('role_selection_time', Date.now().toString());\n  }\n\n  // 저장된 역할 가져오기\n  static getSavedRole() {\n    const savedRole = sessionStorage.getItem('selected_role');\n    const selectionTime = sessionStorage.getItem('role_selection_time');\n\n    // 24시간 후 세션 만료\n    if (savedRole && selectionTime) {\n      const elapsed = Date.now() - parseInt(selectionTime);\n      if (elapsed < 24 * 60 * 60 * 1000) {\n        return savedRole;\n      } else {\n        // 만료된 세션 정리\n        this.clearSavedRole();\n      }\n    }\n    return null;\n  }\n\n  // 저장된 역할 정보 삭제\n  static clearSavedRole() {\n    sessionStorage.removeItem('selected_role');\n    sessionStorage.removeItem('role_selection_time');\n  }\n\n  // 선택 유효성 검증\n  static validateRoleSelection(role) {\n    return role === 'admin' || role === 'user';\n  }\n}\n// 중복 클릭 방지를 위한 디바운스\nRoleSelectUtils.lastClickTime = 0;\nRoleSelectUtils.DEBOUNCE_DELAY = 1000;","map":{"version":3,"names":["RoleSelectAPI","selectRole","role","deviceId","getDeviceId","request","response","fetch","API_ENDPOINT","method","headers","body","JSON","stringify","ok","status","Error","json","error","console","message","success","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","generateMockResponse","Promise","resolve","setTimeout","redirectPath","redirect","REQUEST_DELAY","RoleSelectUtils","canProceedWithSelection","lastClickTime","DEBOUNCE_DELAY","getRoleOptions","title","subtitle","avatar","getRoleMessage","getRoleTheme","getLocalizedErrorMessage","errorMessages","saveSelectedRole","sessionStorage","getSavedRole","savedRole","selectionTime","elapsed","parseInt","clearSavedRole","removeItem","validateRoleSelection"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/services/RoleSelectionTypes.ts"],"sourcesContent":["// RoleTypes.ts - 역할 선택 타입 정의\r\n\r\nexport interface RoleSelectRequest {\r\n  role: 'admin' | 'user';\r\n  deviceId: string;\r\n}\r\n\r\nexport interface RoleSelectResponse {\r\n  success: true;\r\n  redirect: string;\r\n  message: string;\r\n}\r\n\r\nexport interface RoleSelectError {\r\n  success: false;\r\n  message: string;\r\n}\r\n\r\nexport interface ServerError {\r\n  error: string;\r\n}\r\n\r\nexport type RoleType = 'admin' | 'user';\r\n\r\nexport interface RoleOption {\r\n  role: RoleType;\r\n  title: string;\r\n  subtitle: string;\r\n  avatar: string;\r\n  redirect: string;\r\n}\r\n\r\nexport interface RoleSelectState {\r\n  selectedRole: RoleType | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  isTransitioning: boolean;\r\n}\r\n\r\n// 역할 선택 API 클래스\r\nexport class RoleSelectAPI {\r\n  private static readonly API_ENDPOINT = '/api/role/select';\r\n  private static readonly REQUEST_DELAY = 500; // 중복 클릭 방지\r\n\r\n  static async selectRole(role: RoleType): Promise<RoleSelectResponse | RoleSelectError | ServerError> {\r\n    try {\r\n      const deviceId = this.getDeviceId();\r\n      const request: RoleSelectRequest = {\r\n        role,\r\n        deviceId\r\n      };\r\n\r\n      const response = await fetch(this.API_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 500) {\r\n          throw new Error('server_error');\r\n        }\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('역할 선택 API 오류:', error);\r\n      \r\n      if (error instanceof Error) {\r\n        if (error.message === 'server_error') {\r\n          return {\r\n            error: '서버 오류로 역할 선택이 실패했습니다.'\r\n          };\r\n        }\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        message: '네트워크 오류로 역할 선택에 실패했습니다.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 디바이스 ID 생성/가져오기\r\n  private static getDeviceId(): string {\r\n    let deviceId = localStorage.getItem('device_id');\r\n    \r\n    if (!deviceId) {\r\n      deviceId = `iot-device-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n      localStorage.setItem('device_id', deviceId);\r\n    }\r\n    \r\n    return deviceId;\r\n  }\r\n\r\n  // 개발용 목 응답 생성\r\n  static generateMockResponse(role: RoleType): Promise<RoleSelectResponse> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const redirectPath = role === 'admin' ? '/admin/dashboard' : '/user/dashboard';\r\n        const message = role === 'admin' ? '관리자 역할로 접속합니다.' : '사용자 역할로 접속합니다.';\r\n        \r\n        resolve({\r\n          success: true,\r\n          redirect: redirectPath,\r\n          message\r\n        });\r\n      }, 1000 + Math.random() * 1000); // 1-2초 지연\r\n    });\r\n  }\r\n}\r\n\r\n// 역할 선택 유틸리티 함수들\r\nexport class RoleSelectUtils {\r\n  // 중복 클릭 방지를 위한 디바운스\r\n  private static lastClickTime = 0;\r\n  private static readonly DEBOUNCE_DELAY = 1000; // 1초\r\n\r\n  static canProceedWithSelection(): boolean {\r\n    const now = Date.now();\r\n    if (now - this.lastClickTime < this.DEBOUNCE_DELAY) {\r\n      return false;\r\n    }\r\n    this.lastClickTime = now;\r\n    return true;\r\n  }\r\n\r\n  // 역할 정보 가져오기\r\n  static getRoleOptions(): RoleOption[] {\r\n    return [\r\n      {\r\n        role: 'admin',\r\n        title: 'Admin',\r\n        subtitle: 'EX.professor',\r\n        avatar: '/images/admin-avatar.jpg', // 실제 이미지 경로로 교체\r\n        redirect: '/admin/dashboard'\r\n      },\r\n      {\r\n        role: 'user',\r\n        title: 'User',\r\n        subtitle: 'EX. student',\r\n        avatar: '/images/user-avatar.jpg', // 실제 이미지 경로로 교체\r\n        redirect: '/user/dashboard'\r\n      }\r\n    ];\r\n  }\r\n\r\n  // 역할에 따른 메시지 생성\r\n  static getRoleMessage(role: RoleType): string {\r\n    switch (role) {\r\n      case 'admin':\r\n        return '관리자 권한으로 시스템에 접속합니다.';\r\n      case 'user':\r\n        return '사용자 권한으로 시스템에 접속합니다.';\r\n      default:\r\n        return '시스템에 접속합니다.';\r\n    }\r\n  }\r\n\r\n  // 역할에 따른 색상 테마 반환\r\n  static getRoleTheme(role: RoleType): string {\r\n    switch (role) {\r\n      case 'admin':\r\n        return '#1f2937'; // 어두운 회색 (관리자)\r\n      case 'user':\r\n        return '#fb923c'; // 오렌지 (사용자)\r\n      default:\r\n        return '#6b7280';\r\n    }\r\n  }\r\n\r\n  // 에러 메시지 현지화\r\n  static getLocalizedErrorMessage(error: string): string {\r\n    const errorMessages: Record<string, string> = {\r\n      'invalid_role': '잘못된 역할 정보입니다.',\r\n      'server_error': '서버 오류로 역할 선택이 실패했습니다.',\r\n      'network_error': '네트워크 오류로 역할 선택에 실패했습니다.',\r\n      'session_expired': '세션이 만료되었습니다. 다시 시도해주세요.'\r\n    };\r\n\r\n    return errorMessages[error] || '알 수 없는 오류가 발생했습니다.';\r\n  }\r\n\r\n  // 세션에 역할 저장\r\n  static saveSelectedRole(role: RoleType): void {\r\n    sessionStorage.setItem('selected_role', role);\r\n    sessionStorage.setItem('role_selection_time', Date.now().toString());\r\n  }\r\n\r\n  // 저장된 역할 가져오기\r\n  static getSavedRole(): RoleType | null {\r\n    const savedRole = sessionStorage.getItem('selected_role');\r\n    const selectionTime = sessionStorage.getItem('role_selection_time');\r\n    \r\n    // 24시간 후 세션 만료\r\n    if (savedRole && selectionTime) {\r\n      const elapsed = Date.now() - parseInt(selectionTime);\r\n      if (elapsed < 24 * 60 * 60 * 1000) {\r\n        return savedRole as RoleType;\r\n      } else {\r\n        // 만료된 세션 정리\r\n        this.clearSavedRole();\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // 저장된 역할 정보 삭제\r\n  static clearSavedRole(): void {\r\n    sessionStorage.removeItem('selected_role');\r\n    sessionStorage.removeItem('role_selection_time');\r\n  }\r\n\r\n  // 선택 유효성 검증\r\n  static validateRoleSelection(role: string): role is RoleType {\r\n    return role === 'admin' || role === 'user';\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}