{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arh05\\\\AWS2_GIOT_FULL\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n//   const sensorTypeOptions = ['Temperature', 'Humidity', 'CO Concentration'];\n//   const statusOptions = ['GOOD', 'NORMAL', 'WARNING'];\n\n//   return (\n//     <div className=\"container\">\n//       {/* 사이드바 */}\n//       <div className=\"sidebar\">\n//         <div className=\"logoSection\">\n//           <div className=\"logoContainer\">\n//             <div className=\"logoMain\">AWS²</div>\n//             <div className=\"logoAccent\">GIoT</div>\n//           </div>\n//           <div className=\"logoSubtext\">IoT Cloud System</div>\n//         </div>\n\n//         <nav className=\"navigation\">\n//           <button className=\"sidebarItem\" onClick={onNavigateBack}>\n//             <span><LayoutDashboard size={20} /></span>\n//             <span>Dashboard</span>\n//           </button>\n//           <button className=\"sidebarItem\" onClick={onNavigateToChatbot}>\n//             <span><MessageCircle size={20} /></span>\n//             <span>Chatbot</span>\n//           </button>\n//           <button className=\"sidebarItem sidebarItemActive\">\n//             <span><HistoryIcon size={20} /></span>\n//             <span>History</span>\n//           </button>\n//           <button className=\"sidebarItem\">\n//             <span><Settings size={20} /></span>\n//             <span>Settings</span>\n//           </button>\n//           <button className=\"sidebarItem\">\n//             <span><LogOut size={20} /></span>\n//             <span>Logout</span>\n//           </button>\n//         </nav>\n\n//         <div className=\"sidebarFooter\">\n//           <div className=\"footerText\">2025 GBSA AWS</div>\n//         </div>\n//       </div>\n\n//       {/* 메인 컨텐츠 영역 */}\n//       <div className=\"mainContent\">\n//         {/* 상단 헤더 */}\n//         <header className=\"header\">\n//           <div className=\"headerContent\">\n//             <div>\n//               <h1 className=\"headerTitle\">History</h1>\n//               <p className=\"headerSubtitle\">{new Date().toLocaleString('ko-KR')}</p>\n//             </div>\n\n//             <div className=\"headerActions\">\n//               {/* 알림 아이콘 */}\n//               <div className=\"notificationContainer\">\n//                 <button\n//                   onClick={() => {\n//                     setIsNotificationOpen(!isNotificationOpen);\n//                     setIsAdminMenuOpen(false);\n//                   }}\n//                   className=\"notificationButton\"\n//                 >\n//                   <Bell size={24} />\n//                   {notificationData.count > 0 && (\n//                     <span className=\"notificationBadge\">\n//                       {notificationData.count > 99 ? '99+' : notificationData.count}\n//                     </span>\n//                   )}\n//                 </button>\n\n//                 <NotificationDropdown\n//                   isOpen={isNotificationOpen}\n//                   onClose={() => setIsNotificationOpen(false)}\n//                   notifications={notificationData.notifications}\n//                 />\n//               </div>\n\n//               {/* 관리자 프로필 */}\n//               <div className=\"adminContainer\">\n//                 <button\n//                   onClick={() => {\n//                     setIsAdminMenuOpen(!isAdminMenuOpen);\n//                     setIsNotificationOpen(false);\n//                   }}\n//                   className=\"adminButton\"\n//                 >\n//                   <div className=\"adminAvatar\">\n//                     <User size={18} style={{ color: 'white' }} />\n//                   </div>\n//                   <span className=\"adminLabel\">Admin</span>\n//                 </button>\n\n//                 <AdminDropdown\n//                   isOpen={isAdminMenuOpen}\n//                   onClose={() => setIsAdminMenuOpen(false)}\n//                 />\n//               </div>\n//             </div>\n//           </div>\n//         </header>\n\n//         {/* 히스토리 메인 */}\n//         <main className=\"historyMain\">\n//           <div className=\"historyContent\">\n//             {/* 필터 섹션 */}\n//             <section className=\"historyFilterSection\">\n//               <div className=\"historyFilterHeader\">\n//                 <button \n//                   className=\"historyFilterToggle\"\n//                   onClick={() => setHistoryState(prev => ({ \n//                     ...prev, \n//                     showFilters: !prev.showFilters \n//                   }))}\n//                 >\n//                   <Filter size={16} />\n//                   <span>Filter By</span>\n//                   <ChevronRight \n//                     size={16} \n//                     className={`historyFilterIcon ${historyState.showFilters ? 'open' : ''}`}\n//                   />\n//                 </button>\n\n//                 <button \n//                   className=\"historyResetButton\"\n//                   onClick={resetFilters}\n//                 >\n//                   <RotateCcw size={14} />\n//                   Reset Filter\n//                 </button>\n//               </div>\n\n//               {historyState.showFilters && (\n//                 <div className=\"historyFilterContent\">\n//                   {/* 타임스탬프 필터 */}\n//                   <div className=\"historyFilterGroup\">\n//                     <label className=\"historyFilterLabel\">Timestamp</label>\n//                     <div \n//                       ref={el => dropdownRefs.current['timestamp'] = el}\n//                       className=\"historyDatePickerContainer\"\n//                     >\n//                       <button\n//                         className={`historyFilterDropdown ${activeDropdown === 'timestamp' ? 'active' : ''}`}\n//                         onClick={() => setActiveDropdown(\n//                           activeDropdown === 'timestamp' ? null : 'timestamp'\n//                         )}\n//                       >\n//                         <span>\n//                           {historyState.selectedDate \n//                             ? HistoryUtils.formatDateToString(historyState.selectedDate)\n//                             : 'Select date'\n//                           }\n//                         </span>\n//                         <ChevronDown size={16} />\n//                       </button>\n\n//                       {activeDropdown === 'timestamp' && (\n//                         <Calendar\n//                           selectedDate={historyState.selectedDate}\n//                           onDateSelect={handleDateSelect}\n//                           onClose={() => setActiveDropdown(null)}\n//                           onCheckNow={() => {\n//                             applyFilters();\n//                             setActiveDropdown(null);\n//                           }}\n//                         />\n//                       )}\n//                     </div>\n//                   </div>\n\n//                   {/* 센서 타입 필터 */}\n//                   <div className=\"historyFilterGroup\">\n//                     <label className=\"historyFilterLabel\">Order Sensor Type</label>\n//                     <div ref={el => dropdownRefs.current['sensorType'] = el}>\n//                       <button\n//                         className={`historyFilterDropdown ${activeDropdown === 'sensorType' ? 'active' : ''}`}\n//                         onClick={() => setActiveDropdown(\n//                           activeDropdown === 'sensorType' ? null : 'sensorType'\n//                         )}\n//                       >\n//                         <span>{historyState.filters.sensorType || 'All types'}</span>\n//                         <ChevronDown size={16} />\n//                       </button>\n\n//                       {activeDropdown === 'sensorType' && (\n//                         <div className=\"historyFilterDropdownMenu\">\n//                           <button\n//                             className=\"historyFilterDropdownItem\"\n//                             onClick={() => updateFilter('sensorType', null)}\n//                           >\n//                             All types\n//                           </button>\n//                           {sensorTypeOptions.map(type => (\n//                             <button\n//                               key={type}\n//                               className=\"historyFilterDropdownItem\"\n//                               onClick={() => updateFilter('sensorType', type)}\n//                             >\n//                               {type}\n//                             </button>\n//                           ))}\n//                         </div>\n//                       )}\n//                     </div>\n//                   </div>\n\n//                   {/* 상태 필터 */}\n//                   <div className=\"historyFilterGroup\">\n//                     <label className=\"historyFilterLabel\">Order Status</label>\n//                     <div ref={el => dropdownRefs.current['status'] = el}>\n//                       <button\n//                         className={`historyFilterDropdown ${activeDropdown === 'status' ? 'active' : ''}`}\n//                         onClick={() => setActiveDropdown(\n//                           activeDropdown === 'status' ? null : 'status'\n//                         )}\n//                       >\n//                         <span>{historyState.filters.status || 'All status'}</span>\n//                         <ChevronDown size={16} />\n//                       </button>\n\n//                       {activeDropdown === 'status' && (\n//                         <div className=\"historyFilterDropdownMenu\">\n//                           <button\n//                             className=\"historyFilterDropdownItem\"\n//                             onClick={() => updateFilter('status', null)}\n//                           >\n//                             All status\n//                           </button>\n//                           {statusOptions.map(status => (\n//                             <button\n//                               key={status}\n//                               className=\"historyFilterDropdownItem\"\n//                               onClick={() => updateFilter('status', status)}\n//                             >\n//                               {status}\n//                             </button>\n//                           ))}\n//                         </div>\n//                       )}\n//                     </div>\n//                   </div>\n//                 </div>\n//               )}\n//             </section>\n\n//             {/* 에러 메시지 */}\n//             {historyState.error && (\n//               <div className=\"historyError\">\n//                 {historyState.error}\n//               </div>\n//             )}\n\n//             {/* 테이블 섹션 */}\n//             <section className=\"historyTableSection\">\n//               {historyState.isLoading ? (\n//                 <div className=\"historyLoading\">\n//                   <div className=\"historyLoadingSpinner\"></div>\n//                   <span className=\"historyLoadingText\">데이터를 불러오는 중...</span>\n//                 </div>\n//               ) : historyState.events.length === 0 ? (\n//                 <div className=\"historyEmptyState\">\n//                   <div className=\"historyEmptyStateIcon\">\n//                     <FileText size={24} />\n//                   </div>\n//                   <div className=\"historyEmptyStateTitle\">조회된 데이터가 없습니다</div>\n//                   <div className=\"historyEmptyStateDescription\">\n//                     필터 조건을 변경하거나 다른 날짜를 선택해 보세요.\n//                   </div>\n//                 </div>\n//               ) : (\n//                 <>\n//                   <table className=\"historyTable\">\n//                     <thead className=\"historyTableHeader\">\n//                       <tr>\n//                         <th className=\"historyTableHeaderCell\">Event ID</th>\n//                         <th className=\"historyTableHeaderCell\">Timestamp</th>\n//                         <th className=\"historyTableHeaderCell\">Sensor Type</th>\n//                         <th className=\"historyTableHeaderCell\">Value</th>\n//                         <th className=\"historyTableHeaderCell\">Status</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {historyState.events.map((event) => (\n//                         <tr key={event.eventId} className=\"historyTableRow\">\n//                           <td className=\"historyTableCell\">\n//                             <span className=\"historyEventId\">{event.eventId}</span>\n//                           </td>\n//                           <td className=\"historyTableCell\">\n//                             <span className=\"historyTimestamp\">\n//                               {HistoryUtils.formatTimestamp(event.timestamp)}\n//                             </span>\n//                           </td>\n//                           <td className=\"historyTableCell\">\n//                             <span className=\"historySensorType\">{event.sensorType}</span>\n//                           </td>\n//                           <td className=\"historyTableCell\">\n//                             <span className=\"historyValue\">\n//                               {event.value}{HistoryUtils.getSensorUnit(event.sensorType)}\n//                             </span>\n//                           </td>\n//                           <td className=\"historyTableCell\">\n//                             <span className={`historyStatusBadge ${HistoryUtils.getStatusClass(event.status)}`}>\n//                               {event.status}\n//                             </span>\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n\n//                   {/* 페이지네이션 */}\n//                   {historyState.totalPages > 1 && (\n//                     <div className=\"historyPagination\">\n//                       <button\n//                         className=\"historyPaginationButton\"\n//                         onClick={() => changePage(historyState.currentPage - 1)}\n//                         disabled={historyState.currentPage <= 1}\n//                       >\n//                         <ChevronLeft size={16} />\n//                       </button>\n\n//                       <span className=\"historyPaginationInfo\">\n//                         {historyState.currentPage} / {historyState.totalPages}\n//                       </span>\n\n//                       <button\n//                         className=\"historyPaginationButton\"\n//                         onClick={() => changePage(historyState.currentPage + 1)}\n//                         disabled={historyState.currentPage >= historyState.totalPages}\n//                       >\n//                         <ChevronRight size={16} />\n//                       </button>\n//                     </div>\n//                   )}\n//                 </>\n//               )}\n//             </section>\n//           </div>\n//         </main>\n//       </div>\n//     </div>\n//   );\n// };\n\n// import React from 'react';\n\n// import RoleSelectionScreen from './pages/RoleSelection/RoleSelectionScreen';\n// import DashboardScreen  from './pages/Dashboard/DashboardScreen';\n// import ChatbotScreen    from './pages/Chatbot/ChatbotScreen';\n// import HistoryScreen    from './pages/History/HistoryScreen';\n\n// type AppRoute = 'role' | 'dashboard' | 'chatbot' | 'history';\n\n// const App: React.FC = () => {\n//   const [route, setRoute] = React.useState<AppRoute>('role');\n\n//   return (\n//     <>\n//       {route === 'role' && (\n//         <RoleSelectionScreen\n//           onRoleSelected={(_, redirect) => {\n//             setRoute(redirect as AppRoute);\n//           }}\n//         />\n//       )}\n\n//       {route === 'dashboard' && (\n//         <DashboardScreen\n//           onNavigateToChatbot={() => setRoute('chatbot')}\n//           onNavigateToHistory={() => setRoute('history')}\n//           onNavigateToRole={() => setRoute('role')}\n//         />\n//       )}\n\n//       {route === 'chatbot' && (\n//         <ChatbotScreen onNavigateBack={() => setRoute('dashboard')} />\n//       )}\n\n//       {route === 'history' && (\n//         <HistoryScreen\n//           onNavigateBack={() => setRoute('dashboard')}\n//           onNavigateToChatbot={() => setRoute('chatbot')}\n//         />\n//       )}\n//     </>\n//   );\n// };\n\n// export default App;\n\n// export default HistoryScreen;\n// src/App.tsx\n\n// import React from 'react';\n\n// // import TransitionScreen from './pages/Transition/TransitionScreen';\n// import RoleSelectScreen from './pages/RoleSelection/RoleSelectionScreen';\n// import DashboardScreen from './pages/Dashboard/DashboardScreen';\n// import ChatbotScreen from './pages/Chatbot/ChatbotScreen';\n// import HistoryScreen from './pages/History/HistoryScreen';\n\n// type AppRoute = 'role' | 'dashboard' | 'chatbot' | 'history';\n\n// const App: React.FC = () => {\n//   const [route, setRoute] = React.useState<AppRoute>('role');\n\n//   return (\n//     <>\n//       {route === 'role' && (\n//         <RoleSelectScreen\n//           onRoleSelected={(_, redirect) => {\n//             // redirect 값이 'dashboard' | 'chatbot' | 'history' 등으로 온다고 가정\n//             setRoute(redirect as AppRoute);\n//           }}\n//         />\n//       )}\n\n//       {route === 'dashboard' && (\n//         <DashboardScreen\n//           onNavigateToChatbot={() => setRoute('chatbot')}\n//           onNavigateToHistory={() => setRoute('history')}\n//           onNavigateToRole={() => setRoute('role')}\n//         />\n//       )}\n\n//       {route === 'chatbot' && (\n//         <ChatbotScreen\n//           onNavigateBack={() => setRoute('dashboard')}\n//         />\n//       )}\n\n//       {route === 'history' && (\n//         <HistoryScreen\n//           onNavigateBack={() => setRoute('dashboard')}\n//           onNavigateToChatbot={() => setRoute('chatbot')}\n//         />\n//       )}\n//     </>\n//   );\n// };\n\n// export default App;\n\n// App.tsx - 메인 애플리케이션 컴포넌트\n// App.tsx 맨 위에 추가\nimport React, { useState, useEffect } from 'react';\nimport LoadingScreen from './pages/Sloading/LoadingScreen';\nimport MainScreen from './pages/Main/MainScreen';\nimport RoleSelectionScreen from './pages/RoleSelection/RoleSelectionScreen';\nimport TransitionScreen from './pages/Transition/TransitionScreen';\nimport DashboardScreen from './pages/Dashboard/DashboardScreen';\nimport ChatbotScreen from './pages/Chatbot/ChatbotScreen';\nimport HistoryScreen from './pages/History/HistoryScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [appState, setAppState] = useState('loading');\n  const [selectedRole, setSelectedRole] = useState(null);\n\n  // 로딩 완료 핸들러\n  const handleLoadingComplete = redirectPath => {\n    if (redirectPath === '/main' || redirectPath === '/dashboard') {\n      setAppState('main'); // 로딩 후 메인 화면으로\n    }\n  };\n\n  // 메인에서 역할 선택 화면으로 이동\n  const handleNavigateToRoleSelect = () => {\n    setAppState('roleSelect');\n  };\n\n  // 역할 선택 완료 후 전환 화면으로 이동\n  const handleRoleSelected = (role, _redirectPath) => {\n    setSelectedRole(role);\n    setAppState('transition');\n  };\n\n  // 전환 완료 후 대시보드로 이동\n  const handleTransitionComplete = () => {\n    setAppState('dashboard');\n  };\n\n  // 대시보드에서 챗봇으로 이동\n  const handleNavigateToChatbot = () => {\n    setAppState('chatbot');\n  };\n\n  // 대시보드에서 히스토리로 이동\n  const handleNavigateToHistory = () => {\n    setAppState('history');\n  };\n\n  // 챗봇에서 대시보드로 돌아가기\n  const handleNavigateBackToDashboard = () => {\n    setAppState('dashboard');\n  };\n\n  // 히스토리에서 대시보드로 돌아가기\n  const handleNavigateBackFromHistory = () => {\n    setAppState('dashboard');\n  };\n\n  // 히스토리에서 챗봇으로 이동\n  const handleNavigateFromHistoryToChatbot = () => {\n    setAppState('chatbot');\n  };\n\n  // 새로고침 감지 및 로딩 화면 재표시\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      setAppState('loading');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // 첫 방문 여부 확인\n  useEffect(() => {\n    const hasVisited = sessionStorage.getItem('aws_iot_visited');\n\n    // 개발 모드에서는 항상 로딩부터 시작\n    if (process.env.NODE_ENV === 'development') {\n      setAppState('loading');\n    }\n\n    // 방문 표시\n    if (!hasVisited) {\n      sessionStorage.setItem('aws_iot_visited', 'true');\n    }\n  }, []);\n\n  // ESC 키로 메인으로 돌아가기 (개발용)\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (event.key === 'Escape' && appState !== 'loading') {\n        setAppState('main');\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [appState]);\n\n  // 현재 상태에 따른 컴포넌트 렌더링\n  const renderCurrentScreen = () => {\n    switch (appState) {\n      case 'loading':\n        return /*#__PURE__*/_jsxDEV(LoadingScreen, {\n          onLoadingComplete: handleLoadingComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 16\n        }, this);\n      case 'main':\n        return /*#__PURE__*/_jsxDEV(MainScreen, {\n          onNavigateToDashboard: handleNavigateToRoleSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 16\n        }, this);\n      case 'roleSelect':\n        return /*#__PURE__*/_jsxDEV(RoleSelectionScreen, {\n          onRoleSelected: handleRoleSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 16\n        }, this);\n      case 'transition':\n        return /*#__PURE__*/_jsxDEV(TransitionScreen, {\n          targetRole: selectedRole || 'admin',\n          onTransitionComplete: handleTransitionComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this);\n      case 'dashboard':\n        return /*#__PURE__*/_jsxDEV(DashboardScreen, {\n          onNavigateToChatbot: handleNavigateToChatbot,\n          onNavigateToHistory: handleNavigateToHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this);\n      case 'chatbot':\n        return /*#__PURE__*/_jsxDEV(ChatbotScreen, {\n          onNavigateBack: handleNavigateBackToDashboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 16\n        }, this);\n      case 'history':\n        return /*#__PURE__*/_jsxDEV(HistoryScreen, {\n          onNavigateBack: handleNavigateBackFromHistory,\n          onNavigateToChatbot: handleNavigateFromHistoryToChatbot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(LoadingScreen, {\n          onLoadingComplete: handleLoadingComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh',\n      overflow: 'hidden',\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif'\n    },\n    children: [renderCurrentScreen(), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '10px',\n        right: '10px',\n        background: 'rgba(0,0,0,0.7)',\n        color: 'white',\n        padding: '8px 12px',\n        borderRadius: '6px',\n        fontSize: '12px',\n        zIndex: 10000\n      },\n      children: [\"State: \", appState, \" | Role: \", selectedRole || 'none', \" | Press ESC to go to main\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 597,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"R7SFsuiveeMO4ULIzueo/liYZds=\");\n_c = App;\nexport default App; // ✅ 중복 export 제거 (하나만 남김)\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoadingScreen","MainScreen","RoleSelectionScreen","TransitionScreen","DashboardScreen","ChatbotScreen","HistoryScreen","jsxDEV","_jsxDEV","App","_s","appState","setAppState","selectedRole","setSelectedRole","handleLoadingComplete","redirectPath","handleNavigateToRoleSelect","handleRoleSelected","role","_redirectPath","handleTransitionComplete","handleNavigateToChatbot","handleNavigateToHistory","handleNavigateBackToDashboard","handleNavigateBackFromHistory","handleNavigateFromHistoryToChatbot","handleBeforeUnload","window","addEventListener","removeEventListener","hasVisited","sessionStorage","getItem","process","env","NODE_ENV","setItem","handleKeyPress","event","key","renderCurrentScreen","onLoadingComplete","fileName","_jsxFileName","lineNumber","columnNumber","onNavigateToDashboard","onRoleSelected","targetRole","onTransitionComplete","onNavigateToChatbot","onNavigateToHistory","onNavigateBack","style","width","height","overflow","fontFamily","children","position","top","right","background","color","padding","borderRadius","fontSize","zIndex","_c","$RefreshReg$"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/App.tsx"],"sourcesContent":["\r\n\r\n//   const sensorTypeOptions = ['Temperature', 'Humidity', 'CO Concentration'];\r\n//   const statusOptions = ['GOOD', 'NORMAL', 'WARNING'];\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       {/* 사이드바 */}\r\n//       <div className=\"sidebar\">\r\n//         <div className=\"logoSection\">\r\n//           <div className=\"logoContainer\">\r\n//             <div className=\"logoMain\">AWS²</div>\r\n//             <div className=\"logoAccent\">GIoT</div>\r\n//           </div>\r\n//           <div className=\"logoSubtext\">IoT Cloud System</div>\r\n//         </div>\r\n\r\n//         <nav className=\"navigation\">\r\n//           <button className=\"sidebarItem\" onClick={onNavigateBack}>\r\n//             <span><LayoutDashboard size={20} /></span>\r\n//             <span>Dashboard</span>\r\n//           </button>\r\n//           <button className=\"sidebarItem\" onClick={onNavigateToChatbot}>\r\n//             <span><MessageCircle size={20} /></span>\r\n//             <span>Chatbot</span>\r\n//           </button>\r\n//           <button className=\"sidebarItem sidebarItemActive\">\r\n//             <span><HistoryIcon size={20} /></span>\r\n//             <span>History</span>\r\n//           </button>\r\n//           <button className=\"sidebarItem\">\r\n//             <span><Settings size={20} /></span>\r\n//             <span>Settings</span>\r\n//           </button>\r\n//           <button className=\"sidebarItem\">\r\n//             <span><LogOut size={20} /></span>\r\n//             <span>Logout</span>\r\n//           </button>\r\n//         </nav>\r\n\r\n//         <div className=\"sidebarFooter\">\r\n//           <div className=\"footerText\">2025 GBSA AWS</div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* 메인 컨텐츠 영역 */}\r\n//       <div className=\"mainContent\">\r\n//         {/* 상단 헤더 */}\r\n//         <header className=\"header\">\r\n//           <div className=\"headerContent\">\r\n//             <div>\r\n//               <h1 className=\"headerTitle\">History</h1>\r\n//               <p className=\"headerSubtitle\">{new Date().toLocaleString('ko-KR')}</p>\r\n//             </div>\r\n\r\n//             <div className=\"headerActions\">\r\n//               {/* 알림 아이콘 */}\r\n//               <div className=\"notificationContainer\">\r\n//                 <button\r\n//                   onClick={() => {\r\n//                     setIsNotificationOpen(!isNotificationOpen);\r\n//                     setIsAdminMenuOpen(false);\r\n//                   }}\r\n//                   className=\"notificationButton\"\r\n//                 >\r\n//                   <Bell size={24} />\r\n//                   {notificationData.count > 0 && (\r\n//                     <span className=\"notificationBadge\">\r\n//                       {notificationData.count > 99 ? '99+' : notificationData.count}\r\n//                     </span>\r\n//                   )}\r\n//                 </button>\r\n\r\n//                 <NotificationDropdown\r\n//                   isOpen={isNotificationOpen}\r\n//                   onClose={() => setIsNotificationOpen(false)}\r\n//                   notifications={notificationData.notifications}\r\n//                 />\r\n//               </div>\r\n\r\n//               {/* 관리자 프로필 */}\r\n//               <div className=\"adminContainer\">\r\n//                 <button\r\n//                   onClick={() => {\r\n//                     setIsAdminMenuOpen(!isAdminMenuOpen);\r\n//                     setIsNotificationOpen(false);\r\n//                   }}\r\n//                   className=\"adminButton\"\r\n//                 >\r\n//                   <div className=\"adminAvatar\">\r\n//                     <User size={18} style={{ color: 'white' }} />\r\n//                   </div>\r\n//                   <span className=\"adminLabel\">Admin</span>\r\n//                 </button>\r\n\r\n//                 <AdminDropdown\r\n//                   isOpen={isAdminMenuOpen}\r\n//                   onClose={() => setIsAdminMenuOpen(false)}\r\n//                 />\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </header>\r\n\r\n//         {/* 히스토리 메인 */}\r\n//         <main className=\"historyMain\">\r\n//           <div className=\"historyContent\">\r\n//             {/* 필터 섹션 */}\r\n//             <section className=\"historyFilterSection\">\r\n//               <div className=\"historyFilterHeader\">\r\n//                 <button \r\n//                   className=\"historyFilterToggle\"\r\n//                   onClick={() => setHistoryState(prev => ({ \r\n//                     ...prev, \r\n//                     showFilters: !prev.showFilters \r\n//                   }))}\r\n//                 >\r\n//                   <Filter size={16} />\r\n//                   <span>Filter By</span>\r\n//                   <ChevronRight \r\n//                     size={16} \r\n//                     className={`historyFilterIcon ${historyState.showFilters ? 'open' : ''}`}\r\n//                   />\r\n//                 </button>\r\n\r\n//                 <button \r\n//                   className=\"historyResetButton\"\r\n//                   onClick={resetFilters}\r\n//                 >\r\n//                   <RotateCcw size={14} />\r\n//                   Reset Filter\r\n//                 </button>\r\n//               </div>\r\n\r\n//               {historyState.showFilters && (\r\n//                 <div className=\"historyFilterContent\">\r\n//                   {/* 타임스탬프 필터 */}\r\n//                   <div className=\"historyFilterGroup\">\r\n//                     <label className=\"historyFilterLabel\">Timestamp</label>\r\n//                     <div \r\n//                       ref={el => dropdownRefs.current['timestamp'] = el}\r\n//                       className=\"historyDatePickerContainer\"\r\n//                     >\r\n//                       <button\r\n//                         className={`historyFilterDropdown ${activeDropdown === 'timestamp' ? 'active' : ''}`}\r\n//                         onClick={() => setActiveDropdown(\r\n//                           activeDropdown === 'timestamp' ? null : 'timestamp'\r\n//                         )}\r\n//                       >\r\n//                         <span>\r\n//                           {historyState.selectedDate \r\n//                             ? HistoryUtils.formatDateToString(historyState.selectedDate)\r\n//                             : 'Select date'\r\n//                           }\r\n//                         </span>\r\n//                         <ChevronDown size={16} />\r\n//                       </button>\r\n\r\n//                       {activeDropdown === 'timestamp' && (\r\n//                         <Calendar\r\n//                           selectedDate={historyState.selectedDate}\r\n//                           onDateSelect={handleDateSelect}\r\n//                           onClose={() => setActiveDropdown(null)}\r\n//                           onCheckNow={() => {\r\n//                             applyFilters();\r\n//                             setActiveDropdown(null);\r\n//                           }}\r\n//                         />\r\n//                       )}\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   {/* 센서 타입 필터 */}\r\n//                   <div className=\"historyFilterGroup\">\r\n//                     <label className=\"historyFilterLabel\">Order Sensor Type</label>\r\n//                     <div ref={el => dropdownRefs.current['sensorType'] = el}>\r\n//                       <button\r\n//                         className={`historyFilterDropdown ${activeDropdown === 'sensorType' ? 'active' : ''}`}\r\n//                         onClick={() => setActiveDropdown(\r\n//                           activeDropdown === 'sensorType' ? null : 'sensorType'\r\n//                         )}\r\n//                       >\r\n//                         <span>{historyState.filters.sensorType || 'All types'}</span>\r\n//                         <ChevronDown size={16} />\r\n//                       </button>\r\n\r\n//                       {activeDropdown === 'sensorType' && (\r\n//                         <div className=\"historyFilterDropdownMenu\">\r\n//                           <button\r\n//                             className=\"historyFilterDropdownItem\"\r\n//                             onClick={() => updateFilter('sensorType', null)}\r\n//                           >\r\n//                             All types\r\n//                           </button>\r\n//                           {sensorTypeOptions.map(type => (\r\n//                             <button\r\n//                               key={type}\r\n//                               className=\"historyFilterDropdownItem\"\r\n//                               onClick={() => updateFilter('sensorType', type)}\r\n//                             >\r\n//                               {type}\r\n//                             </button>\r\n//                           ))}\r\n//                         </div>\r\n//                       )}\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   {/* 상태 필터 */}\r\n//                   <div className=\"historyFilterGroup\">\r\n//                     <label className=\"historyFilterLabel\">Order Status</label>\r\n//                     <div ref={el => dropdownRefs.current['status'] = el}>\r\n//                       <button\r\n//                         className={`historyFilterDropdown ${activeDropdown === 'status' ? 'active' : ''}`}\r\n//                         onClick={() => setActiveDropdown(\r\n//                           activeDropdown === 'status' ? null : 'status'\r\n//                         )}\r\n//                       >\r\n//                         <span>{historyState.filters.status || 'All status'}</span>\r\n//                         <ChevronDown size={16} />\r\n//                       </button>\r\n\r\n//                       {activeDropdown === 'status' && (\r\n//                         <div className=\"historyFilterDropdownMenu\">\r\n//                           <button\r\n//                             className=\"historyFilterDropdownItem\"\r\n//                             onClick={() => updateFilter('status', null)}\r\n//                           >\r\n//                             All status\r\n//                           </button>\r\n//                           {statusOptions.map(status => (\r\n//                             <button\r\n//                               key={status}\r\n//                               className=\"historyFilterDropdownItem\"\r\n//                               onClick={() => updateFilter('status', status)}\r\n//                             >\r\n//                               {status}\r\n//                             </button>\r\n//                           ))}\r\n//                         </div>\r\n//                       )}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n//             </section>\r\n\r\n//             {/* 에러 메시지 */}\r\n//             {historyState.error && (\r\n//               <div className=\"historyError\">\r\n//                 {historyState.error}\r\n//               </div>\r\n//             )}\r\n\r\n//             {/* 테이블 섹션 */}\r\n//             <section className=\"historyTableSection\">\r\n//               {historyState.isLoading ? (\r\n//                 <div className=\"historyLoading\">\r\n//                   <div className=\"historyLoadingSpinner\"></div>\r\n//                   <span className=\"historyLoadingText\">데이터를 불러오는 중...</span>\r\n//                 </div>\r\n//               ) : historyState.events.length === 0 ? (\r\n//                 <div className=\"historyEmptyState\">\r\n//                   <div className=\"historyEmptyStateIcon\">\r\n//                     <FileText size={24} />\r\n//                   </div>\r\n//                   <div className=\"historyEmptyStateTitle\">조회된 데이터가 없습니다</div>\r\n//                   <div className=\"historyEmptyStateDescription\">\r\n//                     필터 조건을 변경하거나 다른 날짜를 선택해 보세요.\r\n//                   </div>\r\n//                 </div>\r\n//               ) : (\r\n//                 <>\r\n//                   <table className=\"historyTable\">\r\n//                     <thead className=\"historyTableHeader\">\r\n//                       <tr>\r\n//                         <th className=\"historyTableHeaderCell\">Event ID</th>\r\n//                         <th className=\"historyTableHeaderCell\">Timestamp</th>\r\n//                         <th className=\"historyTableHeaderCell\">Sensor Type</th>\r\n//                         <th className=\"historyTableHeaderCell\">Value</th>\r\n//                         <th className=\"historyTableHeaderCell\">Status</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody>\r\n//                       {historyState.events.map((event) => (\r\n//                         <tr key={event.eventId} className=\"historyTableRow\">\r\n//                           <td className=\"historyTableCell\">\r\n//                             <span className=\"historyEventId\">{event.eventId}</span>\r\n//                           </td>\r\n//                           <td className=\"historyTableCell\">\r\n//                             <span className=\"historyTimestamp\">\r\n//                               {HistoryUtils.formatTimestamp(event.timestamp)}\r\n//                             </span>\r\n//                           </td>\r\n//                           <td className=\"historyTableCell\">\r\n//                             <span className=\"historySensorType\">{event.sensorType}</span>\r\n//                           </td>\r\n//                           <td className=\"historyTableCell\">\r\n//                             <span className=\"historyValue\">\r\n//                               {event.value}{HistoryUtils.getSensorUnit(event.sensorType)}\r\n//                             </span>\r\n//                           </td>\r\n//                           <td className=\"historyTableCell\">\r\n//                             <span className={`historyStatusBadge ${HistoryUtils.getStatusClass(event.status)}`}>\r\n//                               {event.status}\r\n//                             </span>\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                   </table>\r\n\r\n//                   {/* 페이지네이션 */}\r\n//                   {historyState.totalPages > 1 && (\r\n//                     <div className=\"historyPagination\">\r\n//                       <button\r\n//                         className=\"historyPaginationButton\"\r\n//                         onClick={() => changePage(historyState.currentPage - 1)}\r\n//                         disabled={historyState.currentPage <= 1}\r\n//                       >\r\n//                         <ChevronLeft size={16} />\r\n//                       </button>\r\n\r\n//                       <span className=\"historyPaginationInfo\">\r\n//                         {historyState.currentPage} / {historyState.totalPages}\r\n//                       </span>\r\n\r\n//                       <button\r\n//                         className=\"historyPaginationButton\"\r\n//                         onClick={() => changePage(historyState.currentPage + 1)}\r\n//                         disabled={historyState.currentPage >= historyState.totalPages}\r\n//                       >\r\n//                         <ChevronRight size={16} />\r\n//                       </button>\r\n//                     </div>\r\n//                   )}\r\n//                 </>\r\n//               )}\r\n//             </section>\r\n//           </div>\r\n//         </main>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// import React from 'react';\r\n\r\n// import RoleSelectionScreen from './pages/RoleSelection/RoleSelectionScreen';\r\n// import DashboardScreen  from './pages/Dashboard/DashboardScreen';\r\n// import ChatbotScreen    from './pages/Chatbot/ChatbotScreen';\r\n// import HistoryScreen    from './pages/History/HistoryScreen';\r\n\r\n// type AppRoute = 'role' | 'dashboard' | 'chatbot' | 'history';\r\n\r\n// const App: React.FC = () => {\r\n//   const [route, setRoute] = React.useState<AppRoute>('role');\r\n\r\n//   return (\r\n//     <>\r\n//       {route === 'role' && (\r\n//         <RoleSelectionScreen\r\n//           onRoleSelected={(_, redirect) => {\r\n//             setRoute(redirect as AppRoute);\r\n//           }}\r\n//         />\r\n//       )}\r\n\r\n//       {route === 'dashboard' && (\r\n//         <DashboardScreen\r\n//           onNavigateToChatbot={() => setRoute('chatbot')}\r\n//           onNavigateToHistory={() => setRoute('history')}\r\n//           onNavigateToRole={() => setRoute('role')}\r\n//         />\r\n//       )}\r\n\r\n//       {route === 'chatbot' && (\r\n//         <ChatbotScreen onNavigateBack={() => setRoute('dashboard')} />\r\n//       )}\r\n\r\n//       {route === 'history' && (\r\n//         <HistoryScreen\r\n//           onNavigateBack={() => setRoute('dashboard')}\r\n//           onNavigateToChatbot={() => setRoute('chatbot')}\r\n//         />\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n// export default HistoryScreen;\r\n// src/App.tsx\r\n\r\n\r\n// import React from 'react';\r\n\r\n\r\n// // import TransitionScreen from './pages/Transition/TransitionScreen';\r\n// import RoleSelectScreen from './pages/RoleSelection/RoleSelectionScreen';\r\n// import DashboardScreen from './pages/Dashboard/DashboardScreen';\r\n// import ChatbotScreen from './pages/Chatbot/ChatbotScreen';\r\n// import HistoryScreen from './pages/History/HistoryScreen';\r\n\r\n\r\n// type AppRoute = 'role' | 'dashboard' | 'chatbot' | 'history';\r\n\r\n// const App: React.FC = () => {\r\n//   const [route, setRoute] = React.useState<AppRoute>('role');\r\n\r\n//   return (\r\n//     <>\r\n//       {route === 'role' && (\r\n//         <RoleSelectScreen\r\n//           onRoleSelected={(_, redirect) => {\r\n//             // redirect 값이 'dashboard' | 'chatbot' | 'history' 등으로 온다고 가정\r\n//             setRoute(redirect as AppRoute);\r\n//           }}\r\n//         />\r\n//       )}\r\n\r\n//       {route === 'dashboard' && (\r\n//         <DashboardScreen\r\n//           onNavigateToChatbot={() => setRoute('chatbot')}\r\n//           onNavigateToHistory={() => setRoute('history')}\r\n//           onNavigateToRole={() => setRoute('role')}\r\n//         />\r\n//       )}\r\n\r\n//       {route === 'chatbot' && (\r\n//         <ChatbotScreen\r\n//           onNavigateBack={() => setRoute('dashboard')}\r\n//         />\r\n//       )}\r\n\r\n//       {route === 'history' && (\r\n//         <HistoryScreen\r\n//           onNavigateBack={() => setRoute('dashboard')}\r\n//           onNavigateToChatbot={() => setRoute('chatbot')}\r\n//         />\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n// App.tsx - 메인 애플리케이션 컴포넌트\r\n// App.tsx 맨 위에 추가\r\nimport React, { useState, useEffect } from 'react';\r\nimport LoadingScreen from './pages/Sloading/LoadingScreen';\r\nimport MainScreen from './pages/Main/MainScreen';\r\nimport RoleSelectionScreen from './pages/RoleSelection/RoleSelectionScreen';\r\nimport TransitionScreen from './pages/Transition/TransitionScreen';\r\nimport DashboardScreen from './pages/Dashboard/DashboardScreen';\r\nimport ChatbotScreen from './pages/Chatbot/ChatbotScreen';\r\nimport HistoryScreen from './pages/History/HistoryScreen';\r\n\r\ntype AppState = 'loading' | 'main' | 'roleSelect' | 'transition' | 'dashboard' | 'chatbot' | 'history';\r\n\r\nconst App: React.FC = () => {\r\n  const [appState, setAppState] = useState<AppState>('loading');\r\n  const [selectedRole, setSelectedRole] = useState<'admin' | 'user' | null>(null);\r\n\r\n  // 로딩 완료 핸들러\r\n  const handleLoadingComplete = (redirectPath: string) => {\r\n    if (redirectPath === '/main' || redirectPath === '/dashboard') {\r\n      setAppState('main'); // 로딩 후 메인 화면으로\r\n    }\r\n  };\r\n\r\n  // 메인에서 역할 선택 화면으로 이동\r\n  const handleNavigateToRoleSelect = () => {\r\n    setAppState('roleSelect');\r\n  };\r\n\r\n  // 역할 선택 완료 후 전환 화면으로 이동\r\n  const handleRoleSelected = (role: 'admin' | 'user', _redirectPath: string) => {\r\n    setSelectedRole(role);\r\n    setAppState('transition');\r\n  };\r\n\r\n  // 전환 완료 후 대시보드로 이동\r\n  const handleTransitionComplete = () => {\r\n    setAppState('dashboard');\r\n  };\r\n\r\n  // 대시보드에서 챗봇으로 이동\r\n  const handleNavigateToChatbot = () => {\r\n    setAppState('chatbot');\r\n  };\r\n\r\n  // 대시보드에서 히스토리로 이동\r\n  const handleNavigateToHistory = () => {\r\n    setAppState('history');\r\n  };\r\n\r\n  // 챗봇에서 대시보드로 돌아가기\r\n  const handleNavigateBackToDashboard = () => {\r\n    setAppState('dashboard');\r\n  };\r\n\r\n  // 히스토리에서 대시보드로 돌아가기\r\n  const handleNavigateBackFromHistory = () => {\r\n    setAppState('dashboard');\r\n  };\r\n\r\n  // 히스토리에서 챗봇으로 이동\r\n  const handleNavigateFromHistoryToChatbot = () => {\r\n    setAppState('chatbot');\r\n  };\r\n\r\n  // 새로고침 감지 및 로딩 화면 재표시\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      setAppState('loading');\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  // 첫 방문 여부 확인\r\n  useEffect(() => {\r\n    const hasVisited = sessionStorage.getItem('aws_iot_visited');\r\n\r\n    // 개발 모드에서는 항상 로딩부터 시작\r\n    if (process.env.NODE_ENV === 'development') {\r\n      setAppState('loading');\r\n    }\r\n\r\n    // 방문 표시\r\n    if (!hasVisited) {\r\n      sessionStorage.setItem('aws_iot_visited', 'true');\r\n    }\r\n  }, []);\r\n\r\n  // ESC 키로 메인으로 돌아가기 (개발용)\r\n  useEffect(() => {\r\n    const handleKeyPress = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape' && appState !== 'loading') {\r\n        setAppState('main');\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [appState]);\r\n\r\n  // 현재 상태에 따른 컴포넌트 렌더링\r\n  const renderCurrentScreen = () => {\r\n    switch (appState) {\r\n      case 'loading':\r\n        return <LoadingScreen onLoadingComplete={handleLoadingComplete} />;\r\n\r\n      case 'main':\r\n        return <MainScreen onNavigateToDashboard={handleNavigateToRoleSelect} />;\r\n\r\n      case 'roleSelect':\r\n        return <RoleSelectionScreen onRoleSelected={handleRoleSelected} />;\r\n\r\n      case 'transition':\r\n        return (\r\n          <TransitionScreen\r\n            targetRole={selectedRole || 'admin'}\r\n            onTransitionComplete={handleTransitionComplete}\r\n          />\r\n        );\r\n\r\n      case 'dashboard':\r\n        return (\r\n          <DashboardScreen\r\n            onNavigateToChatbot={handleNavigateToChatbot}\r\n            onNavigateToHistory={handleNavigateToHistory}\r\n          />\r\n        ); \r\n\r\n      case 'chatbot':\r\n        return <ChatbotScreen onNavigateBack={handleNavigateBackToDashboard} />;\r\n\r\n      case 'history':\r\n        return (\r\n          <HistoryScreen\r\n            onNavigateBack={handleNavigateBackFromHistory}\r\n            onNavigateToChatbot={handleNavigateFromHistoryToChatbot}\r\n          />\r\n        );\r\n\r\n      default:\r\n        return <LoadingScreen onLoadingComplete={handleLoadingComplete} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100vw',\r\n        height: '100vh',\r\n        overflow: 'hidden',\r\n        fontFamily:\r\n          '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif',\r\n      }}\r\n    >\r\n      {renderCurrentScreen()}\r\n\r\n      {/* 개발용 상태 표시 (프로덕션에서 제거) */}\r\n      {process.env.NODE_ENV === 'development' && (\r\n        <div\r\n          style={{\r\n            position: 'fixed',\r\n            top: '10px',\r\n            right: '10px',\r\n            background: 'rgba(0,0,0,0.7)',\r\n            color: 'white',\r\n            padding: '8px 12px',\r\n            borderRadius: '6px',\r\n            fontSize: '12px',\r\n            zIndex: 10000,\r\n          }}\r\n        >\r\n          State: {appState} | Role: {selectedRole || 'none'} | Press ESC to go to main\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App; // ✅ 중복 export 제거 (하나만 남김)\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}