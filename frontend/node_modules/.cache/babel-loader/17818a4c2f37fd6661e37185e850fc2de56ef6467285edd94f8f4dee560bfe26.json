{"ast":null,"code":"// Dashboard.ts - 타입 정의 및 API 로직\nimport React from 'react';\nimport { LayoutDashboard, MessageCircle, History, Settings, LogOut } from 'lucide-react';\n\n// 기본 타입 정의\n\n// 센서 데이터 타입 정의\n\n// API 관련 클래스\nexport class DashboardAPI {\n  // 센서 데이터 가져오기\n  static async getSensorData(sensorType, rangeHour = 10) {\n    try {\n      const response = await fetch(`${this.baseURL}/sensor-data?sensorType=${sensorType}&rangeHour=${rangeHour}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('센서 데이터 API 호출 실패, 더미 데이터 반환:', error);\n      // API 실패 시 더미 데이터 반환\n      return DashboardUtils.generateMockSensorData(sensorType);\n    }\n  }\n\n  // 알림 데이터 가져오기\n  static async getNotifications() {\n    try {\n      // 실제 API 호출로 교체\n      // const response = await fetch(`${this.baseURL}/notifications`);\n      // return await response.json();\n\n      // 더미 데이터\n      return {\n        count: 3,\n        notifications: [{\n          id: '1',\n          message: '온도 센서에서 임계값을 초과했습니다.',\n          timestamp: '2025-08-07 19:30',\n          read: false\n        }, {\n          id: '2',\n          message: '습도 센서 데이터가 업데이트되었습니다.',\n          timestamp: '2025-08-07 19:25',\n          read: false\n        }, {\n          id: '3',\n          message: '시스템 점검이 완료되었습니다.',\n          timestamp: '2025-08-07 19:20',\n          read: true\n        }]\n      };\n    } catch (error) {\n      console.error('알림 데이터 가져오기 실패:', error);\n      return {\n        count: 0,\n        notifications: []\n      };\n    }\n  }\n}\n\n// 유틸리티 함수들\nDashboardAPI.baseURL = '/api/dashboard';\nexport class DashboardUtils {\n  // 현재 시간 포맷팅\n  static getCurrentDateTime() {\n    const now = new Date();\n    return `${now.getFullYear()}년 ${String(now.getMonth() + 1).padStart(2, '0')}월 ${String(now.getDate()).padStart(2, '0')}일 ${String(now.getHours()).padStart(2, '0')}시 ${String(now.getMinutes()).padStart(2, '0')}분`;\n  }\n\n  // 센서 상태에 따른 스타일 클래스 반환\n  static getStatusClass(status) {\n    switch (status) {\n      case 'GOOD':\n        return 'statusGood';\n      case 'WARNING':\n        return 'statusWarning';\n      case 'DANGER':\n        return 'statusDanger';\n      default:\n        return 'statusGood';\n    }\n  }\n\n  // 센서 타입에 따른 그래프 색상 반환\n  static getChartColor(sensorType) {\n    switch (sensorType) {\n      case 'temperature':\n        return '#ef4444';\n      // 빨간색\n      case 'humidity':\n        return '#3b82f6';\n      // 파란색\n      case 'gas':\n        return '#8b5cf6';\n      // 보라색\n      default:\n        return '#6b7280';\n    }\n  }\n\n  // 더미 센서 데이터 생성 (개발용)\n  static generateMockSensorData(sensorType) {\n    const labels = ['-10H', '-9H', '-8H', '-7H', '-6H', '-5H', '-4H', '-3H', '-2H', '-1H', 'NOW'];\n    let values;\n    let unit;\n    let currentValue;\n    let predictionValue;\n    switch (sensorType) {\n      case 'temperature':\n        values = [20.2, 21.5, 22.1, 21.8, 22.4, 23.1, 22.9, 23.5, 24.2, 24.8, 25.5];\n        unit = '°C';\n        currentValue = 25.5;\n        predictionValue = 25.6;\n        break;\n      case 'humidity':\n        values = [58.3, 59.1, 60.2, 59.8, 60.5, 61.2, 60.8, 61.5, 60.9, 60.3, 60.1];\n        unit = '%';\n        currentValue = 60.1;\n        predictionValue = 60.0;\n        break;\n      case 'gas':\n        values = [670, 672, 675, 673, 678, 680, 677, 682, 679, 676, 675];\n        unit = 'ppm';\n        currentValue = 675;\n        predictionValue = 670;\n        break;\n      default:\n        values = [];\n        unit = '';\n        currentValue = 0;\n        predictionValue = 0;\n    }\n    return {\n      success: true,\n      sensorType,\n      unit,\n      labels,\n      values,\n      current: {\n        value: currentValue,\n        status: 'GOOD'\n      },\n      prediction: {\n        value: predictionValue\n      },\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\n// 센서 옵션 상수\nexport const SENSOR_OPTIONS = [{\n  value: 'temperature',\n  label: 'TEMPERATURE',\n  displayName: '온도'\n}, {\n  value: 'humidity',\n  label: 'HUMIDITY',\n  displayName: '습도'\n}, {\n  value: 'gas',\n  label: 'GAS CONCENTRATION',\n  displayName: '가스 농도'\n}];\n\n// 메뉴 아이템 상수\nexport const MENU_ITEMS = [{\n  icon: /*#__PURE__*/React.createElement(LayoutDashboard, {\n    size: 20\n  }),\n  label: 'Dashboard',\n  path: '/dashboard'\n}, {\n  icon: /*#__PURE__*/React.createElement(MessageCircle, {\n    size: 20\n  }),\n  label: 'Chatbot',\n  path: '/chatbot'\n}, {\n  icon: /*#__PURE__*/React.createElement(History, {\n    size: 20\n  }),\n  label: 'History',\n  path: '/history'\n}, {\n  icon: /*#__PURE__*/React.createElement(Settings, {\n    size: 20\n  }),\n  label: 'Settings',\n  path: '/settings'\n}, {\n  icon: /*#__PURE__*/React.createElement(LogOut, {\n    size: 20\n  }),\n  label: 'Logout',\n  path: '/logout'\n}];","map":{"version":3,"names":["React","LayoutDashboard","MessageCircle","History","Settings","LogOut","DashboardAPI","getSensorData","sensorType","rangeHour","response","fetch","baseURL","headers","ok","Error","status","json","error","console","DashboardUtils","generateMockSensorData","getNotifications","count","notifications","id","message","timestamp","read","getCurrentDateTime","now","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getStatusClass","getChartColor","labels","values","unit","currentValue","predictionValue","success","current","value","prediction","toISOString","SENSOR_OPTIONS","label","displayName","MENU_ITEMS","icon","createElement","size","path"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/services/DashboardTypes.ts"],"sourcesContent":["// Dashboard.ts - 타입 정의 및 API 로직\r\nimport React from 'react';\r\nimport { Bell, User, LayoutDashboard, MessageCircle, History, Settings, LogOut } from 'lucide-react';\r\n\r\n// 기본 타입 정의\r\nexport interface NotificationData {\r\n  count: number;\r\n  notifications: Array<{\r\n    id: string;\r\n    message: string;\r\n    timestamp: string;\r\n    read: boolean;\r\n  }>;\r\n}\r\n\r\nexport interface SidebarItemProps {\r\n  icon: React.ReactNode;\r\n  label: string;\r\n  isActive: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport interface MenuItem {\r\n  icon: React.ReactNode;\r\n  label: string;\r\n  path: string;\r\n}\r\n\r\n// 센서 데이터 타입 정의\r\nexport interface SensorData {\r\n  success: boolean;\r\n  sensorType: 'temperature' | 'humidity' | 'gas';\r\n  unit: string;\r\n  labels: string[];\r\n  values: number[];\r\n  current: {\r\n    value: number;\r\n    status: 'GOOD' | 'WARNING' | 'DANGER';\r\n  };\r\n  prediction: {\r\n    value: number;\r\n  };\r\n  timestamp: string;\r\n}\r\n\r\nexport interface SensorDataError {\r\n  success: false;\r\n  error: string;\r\n}\r\n\r\nexport type SensorType = 'temperature' | 'humidity' | 'gas';\r\n\r\nexport interface SensorOption {\r\n  value: SensorType;\r\n  label: string;\r\n  displayName: string;\r\n}\r\n\r\n// API 관련 클래스\r\nexport class DashboardAPI {\r\n  private static baseURL = '/api/dashboard';\r\n\r\n  // 센서 데이터 가져오기\r\n  static async getSensorData(\r\n    sensorType: SensorType, \r\n    rangeHour: number = 10\r\n  ): Promise<SensorData | SensorDataError> {\r\n    try {\r\n      const response = await fetch(\r\n        `${this.baseURL}/sensor-data?sensorType=${sensorType}&rangeHour=${rangeHour}`,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('센서 데이터 API 호출 실패, 더미 데이터 반환:', error);\r\n      // API 실패 시 더미 데이터 반환\r\n      return DashboardUtils.generateMockSensorData(sensorType);\r\n    }\r\n  }\r\n\r\n  // 알림 데이터 가져오기\r\n  static async getNotifications(): Promise<NotificationData> {\r\n    try {\r\n      // 실제 API 호출로 교체\r\n      // const response = await fetch(`${this.baseURL}/notifications`);\r\n      // return await response.json();\r\n\r\n      // 더미 데이터\r\n      return {\r\n        count: 3,\r\n        notifications: [\r\n          {\r\n            id: '1',\r\n            message: '온도 센서에서 임계값을 초과했습니다.',\r\n            timestamp: '2025-08-07 19:30',\r\n            read: false\r\n          },\r\n          {\r\n            id: '2',\r\n            message: '습도 센서 데이터가 업데이트되었습니다.',\r\n            timestamp: '2025-08-07 19:25',\r\n            read: false\r\n          },\r\n          {\r\n            id: '3',\r\n            message: '시스템 점검이 완료되었습니다.',\r\n            timestamp: '2025-08-07 19:20',\r\n            read: true\r\n          }\r\n        ]\r\n      };\r\n    } catch (error) {\r\n      console.error('알림 데이터 가져오기 실패:', error);\r\n      return { count: 0, notifications: [] };\r\n    }\r\n  }\r\n}\r\n\r\n// 유틸리티 함수들\r\nexport class DashboardUtils {\r\n  // 현재 시간 포맷팅\r\n  static getCurrentDateTime(): string {\r\n    const now = new Date();\r\n    return `${now.getFullYear()}년 ${String(now.getMonth() + 1).padStart(2, '0')}월 ${String(now.getDate()).padStart(2, '0')}일 ${String(now.getHours()).padStart(2, '0')}시 ${String(now.getMinutes()).padStart(2, '0')}분`;\r\n  }\r\n\r\n  // 센서 상태에 따른 스타일 클래스 반환\r\n  static getStatusClass(status: string): string {\r\n    switch (status) {\r\n      case 'GOOD':\r\n        return 'statusGood';\r\n      case 'WARNING':\r\n        return 'statusWarning';\r\n      case 'DANGER':\r\n        return 'statusDanger';\r\n      default:\r\n        return 'statusGood';\r\n    }\r\n  }\r\n\r\n  // 센서 타입에 따른 그래프 색상 반환\r\n  static getChartColor(sensorType: SensorType): string {\r\n    switch (sensorType) {\r\n      case 'temperature':\r\n        return '#ef4444'; // 빨간색\r\n      case 'humidity':\r\n        return '#3b82f6'; // 파란색\r\n      case 'gas':\r\n        return '#8b5cf6'; // 보라색\r\n      default:\r\n        return '#6b7280';\r\n    }\r\n  }\r\n\r\n  // 더미 센서 데이터 생성 (개발용)\r\n  static generateMockSensorData(sensorType: SensorType): SensorData {\r\n    const labels = ['-10H', '-9H', '-8H', '-7H', '-6H', '-5H', '-4H', '-3H', '-2H', '-1H', 'NOW'];\r\n    let values: number[];\r\n    let unit: string;\r\n    let currentValue: number;\r\n    let predictionValue: number;\r\n\r\n    switch (sensorType) {\r\n      case 'temperature':\r\n        values = [20.2, 21.5, 22.1, 21.8, 22.4, 23.1, 22.9, 23.5, 24.2, 24.8, 25.5];\r\n        unit = '°C';\r\n        currentValue = 25.5;\r\n        predictionValue = 25.6;\r\n        break;\r\n      case 'humidity':\r\n        values = [58.3, 59.1, 60.2, 59.8, 60.5, 61.2, 60.8, 61.5, 60.9, 60.3, 60.1];\r\n        unit = '%';\r\n        currentValue = 60.1;\r\n        predictionValue = 60.0;\r\n        break;\r\n      case 'gas':\r\n        values = [670, 672, 675, 673, 678, 680, 677, 682, 679, 676, 675];\r\n        unit = 'ppm';\r\n        currentValue = 675;\r\n        predictionValue = 670;\r\n        break;\r\n      default:\r\n        values = [];\r\n        unit = '';\r\n        currentValue = 0;\r\n        predictionValue = 0;\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      sensorType,\r\n      unit,\r\n      labels,\r\n      values,\r\n      current: {\r\n        value: currentValue,\r\n        status: 'GOOD'\r\n      },\r\n      prediction: {\r\n        value: predictionValue\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\n// 센서 옵션 상수\r\nexport const SENSOR_OPTIONS: SensorOption[] = [\r\n  { value: 'temperature', label: 'TEMPERATURE', displayName: '온도' },\r\n  { value: 'humidity', label: 'HUMIDITY', displayName: '습도' },\r\n  { value: 'gas', label: 'GAS CONCENTRATION', displayName: '가스 농도' }\r\n];\r\n\r\n// 메뉴 아이템 상수\r\nexport const MENU_ITEMS: MenuItem[] = [\r\n  { icon: React.createElement(LayoutDashboard, { size: 20 }), label: 'Dashboard', path: '/dashboard' },\r\n  { icon: React.createElement(MessageCircle, { size: 20 }), label: 'Chatbot', path: '/chatbot' },\r\n  { icon: React.createElement(History, { size: 20 }), label: 'History', path: '/history' },\r\n  { icon: React.createElement(Settings, { size: 20 }), label: 'Settings', path: '/settings' },\r\n  { icon: React.createElement(LogOut, { size: 20 }), label: 'Logout', path: '/logout' }\r\n];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}