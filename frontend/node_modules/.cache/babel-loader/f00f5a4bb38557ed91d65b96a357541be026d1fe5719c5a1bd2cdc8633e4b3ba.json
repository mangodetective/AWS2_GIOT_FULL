{"ast":null,"code":"// LoadingTypes.ts - 로딩 관련 타입 정의\n\nexport class LoadingAPI {\n  static async enterMainView() {\n    try {\n      const response = await fetch(`${this.baseURL}/enter`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Main API 호출 실패, 더미 데이터 반환:', error);\n\n      // API 실패 시 더미 응답 반환\n      return {\n        success: true,\n        isReady: true,\n        redirect: '/main',\n        delay: 3000,\n        status: 'ready',\n        message: 'System ready (Mock data)',\n        sensorConnected: true,\n        timestamp: Date.now()\n      };\n    }\n  }\n  static async generateMockResponse() {\n    // 개발용 목 응답\n    await LoadingUtils.delay(1000);\n    return {\n      success: true,\n      isReady: true,\n      redirect: '/main',\n      delay: 3000,\n      status: 'ready',\n      message: 'System initialized successfully',\n      sensorConnected: true,\n      timestamp: Date.now()\n    };\n  }\n}\nLoadingAPI.baseURL = '/api/main';\nexport class LoadingUtils {\n  static formatLoadingMessage(progress) {\n    if (progress < 20) return 'Initializing system...';\n    if (progress < 40) return 'Checking sensor connections...';\n    if (progress < 60) return 'Loading configuration...';\n    if (progress < 80) return 'Preparing dashboard...';\n    return 'Almost ready...';\n  }\n  static delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  static getArrowLength(progress) {\n    return Math.min(progress, 100);\n  }\n  static getAnimationStage(progress) {\n    if (progress < 25) return 1;\n    if (progress < 50) return 2;\n    if (progress < 75) return 3;\n    return 4;\n  }\n}","map":{"version":3,"names":["LoadingAPI","enterMainView","response","fetch","baseURL","method","headers","ok","Error","status","json","error","console","success","isReady","redirect","delay","message","sensorConnected","timestamp","Date","now","generateMockResponse","LoadingUtils","formatLoadingMessage","progress","ms","Promise","resolve","setTimeout","getArrowLength","Math","min","getAnimationStage"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/services/LoadingTypes.ts"],"sourcesContent":["// LoadingTypes.ts - 로딩 관련 타입 정의\r\n\r\nexport interface LoadingState {\r\n  isLoading: boolean;\r\n  isReady: boolean;\r\n  progress: number;\r\n  message: string;\r\n  error: string | null;\r\n  showRetryButton: boolean;\r\n}\r\n\r\nexport interface LoadingResponse {\r\n  success: boolean;\r\n  isReady: boolean;\r\n  redirect: string;\r\n  delay: number;\r\n  status: 'ready' | 'initializing' | 'error';\r\n  message: string;\r\n  sensorConnected: boolean;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface LoadingError {\r\n  success: false;\r\n  message: string;   // ← 이 필드가 필요합니다\r\n  error?: string;    // (있으면 보조 메시지로 사용)\r\n}\r\n\r\nexport class LoadingAPI {\r\n  private static baseURL = '/api/main';\r\n\r\n  static async enterMainView(): Promise<LoadingResponse | LoadingError> {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/enter`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Main API 호출 실패, 더미 데이터 반환:', error);\r\n      \r\n      // API 실패 시 더미 응답 반환\r\n      return {\r\n        success: true,\r\n        isReady: true,\r\n        redirect: '/main',\r\n        delay: 3000,\r\n        status: 'ready',\r\n        message: 'System ready (Mock data)',\r\n        sensorConnected: true,\r\n        timestamp: Date.now()\r\n      };\r\n    }\r\n  }\r\n\r\n  static async generateMockResponse(): Promise<LoadingResponse | LoadingError> {\r\n    // 개발용 목 응답\r\n    await LoadingUtils.delay(1000);\r\n    return {\r\n      success: true,\r\n      isReady: true,\r\n      redirect: '/main',\r\n      delay: 3000,\r\n      status: 'ready',\r\n      message: 'System initialized successfully',\r\n      sensorConnected: true,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadingUtils {\r\n  static formatLoadingMessage(progress: number): string {\r\n    if (progress < 20) return 'Initializing system...';\r\n    if (progress < 40) return 'Checking sensor connections...';\r\n    if (progress < 60) return 'Loading configuration...';\r\n    if (progress < 80) return 'Preparing dashboard...';\r\n    return 'Almost ready...';\r\n  }\r\n\r\n  static delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  static getArrowLength(progress: number): number {\r\n    return Math.min(progress, 100);\r\n  }\r\n\r\n  static getAnimationStage(progress: number): number {\r\n    if (progress < 25) return 1;\r\n    if (progress < 50) return 2;\r\n    if (progress < 75) return 3;\r\n    return 4;\r\n  }\r\n}"],"mappings":"AAAA;;AA4BA,OAAO,MAAMA,UAAU,CAAC;EAGtB,aAAaC,aAAaA,CAAA,EAA4C;IACpE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAE;QACpDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ;MACF,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,QAAQN,QAAQ,CAACO,MAAM,EAAE,CAAC;MAC5C;MAEA,OAAO,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;;MAElD;MACA,OAAO;QACLE,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE,OAAO;QACjBC,KAAK,EAAE,IAAI;QACXP,MAAM,EAAE,OAAO;QACfQ,OAAO,EAAE,0BAA0B;QACnCC,eAAe,EAAE,IAAI;QACrBC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;IACH;EACF;EAEA,aAAaC,oBAAoBA,CAAA,EAA4C;IAC3E;IACA,MAAMC,YAAY,CAACP,KAAK,CAAC,IAAI,CAAC;IAC9B,OAAO;MACLH,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE,OAAO;MACjBC,KAAK,EAAE,IAAI;MACXP,MAAM,EAAE,OAAO;MACfQ,OAAO,EAAE,iCAAiC;MAC1CC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC;EACH;AACF;AAjDarB,UAAU,CACNI,OAAO,GAAG,WAAW;AAkDtC,OAAO,MAAMmB,YAAY,CAAC;EACxB,OAAOC,oBAAoBA,CAACC,QAAgB,EAAU;IACpD,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,wBAAwB;IAClD,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,gCAAgC;IAC1D,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,0BAA0B;IACpD,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,wBAAwB;IAClD,OAAO,iBAAiB;EAC1B;EAEA,OAAOT,KAAKA,CAACU,EAAU,EAAiB;IACtC,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;EACxD;EAEA,OAAOI,cAAcA,CAACL,QAAgB,EAAU;IAC9C,OAAOM,IAAI,CAACC,GAAG,CAACP,QAAQ,EAAE,GAAG,CAAC;EAChC;EAEA,OAAOQ,iBAAiBA,CAACR,QAAgB,EAAU;IACjD,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,CAAC;IAC3B,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,CAAC;IAC3B,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,CAAC;IAC3B,OAAO,CAAC;EACV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}