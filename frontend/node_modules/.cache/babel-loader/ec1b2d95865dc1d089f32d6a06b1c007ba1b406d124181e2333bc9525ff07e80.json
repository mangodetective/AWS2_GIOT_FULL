{"ast":null,"code":"// TransitionTypes.ts - 중간 로딩 화면 타입 정의\n\n// 중간 로딩 API 클래스\nexport class TransitionAPI {\n  // 5초\n\n  static async initializeTransition(targetRole) {\n    try {\n      const request = {\n        event: 'transition_request',\n        targetRole,\n        timestamp: new Date().toISOString()\n      };\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.TIMEOUT_DURATION);\n      const response = await fetch(this.API_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify(request),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('unauthorized_role');\n        }\n        if (response.status === 403) {\n          throw new Error('token_expired');\n        }\n        throw new Error('resource_load_failed');\n      }\n      return await response.json();\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          return {\n            error: 'transition_timeout',\n            message: '전환 중 문제가 발생했습니다. 다시 시도해주세요.'\n          };\n        }\n        const errorType = error.message;\n        return {\n          error: errorType,\n          message: this.getErrorMessage(errorType)\n        };\n      }\n      return {\n        error: 'resource_load_failed',\n        message: '리소스 로딩에 실패했습니다.'\n      };\n    }\n  }\n\n  // 인증 토큰 가져오기\n  static getAuthToken() {\n    return localStorage.getItem('auth_token') || 'demo_token';\n  }\n\n  // 에러 메시지 매핑\n  static getErrorMessage(errorType) {\n    const errorMessages = {\n      'unauthorized_role': '접근 권한이 없습니다. 다시 로그인하세요.',\n      'token_expired': '인증이 만료되었습니다. 다시 로그인해주세요.',\n      'resource_load_failed': '권한 기반 리소스 로딩에 실패했습니다.',\n      'transition_timeout': '전환 중 문제가 발생했습니다. 다시 시도해주세요.'\n    };\n    return errorMessages[errorType];\n  }\n\n  // 개발용 목 데이터 생성\n  static generateMockResponse(targetRole) {\n    return new Promise(resolve => {\n      // 1.5초 후 준비 완료로 응답\n      setTimeout(() => {\n        resolve({\n          status: 'transition_ready',\n          nextPage: targetRole === 'admin' ? '/admin/dashboard' : '/user/dashboard',\n          delay: 2000\n        });\n      }, 1500);\n    });\n  }\n}\nTransitionAPI.API_ENDPOINT = '/api/transition/initialize';\nTransitionAPI.TIMEOUT_DURATION = 5000;\n// 중간 로딩 유틸리티 함수들\nexport class TransitionUtils {\n  // 진행률을 화살표 투명도로 변환\n  static getArrowOpacity(progress) {\n    return Math.min(1, Math.max(0.3, progress / 100));\n  }\n\n  // 진행률을 화살표 크기로 변환\n  static getArrowScale(progress) {\n    return Math.min(1.1, Math.max(0.9, 0.9 + progress / 100 * 0.2));\n  }\n  static getAnimationStage(progress) {\n    if (progress < 30) return 'start';\n    if (progress < 60) return 'middle';\n    if (progress < 95) return 'intense'; // ← end → intense\n    return 'complete';\n  }\n\n  // 에러 메시지 현지화\n  static getLocalizedErrorMessage(error) {\n    const errorMessages = {\n      'unauthorized_role': '접근 권한이 없습니다. 다시 로그인하세요.',\n      'token_expired': '인증이 만료되었습니다. 다시 로그인해주세요.',\n      'resource_load_failed': '권한 기반 리소스 로딩에 실패했습니다.',\n      'transition_timeout': '전환 중 문제가 발생했습니다. 다시 시도해주세요.'\n    };\n    return errorMessages[error] || '알 수 없는 오류가 발생했습니다.';\n  }\n  static calculateArrowOpacity(progress) {\n    return this.getArrowOpacity(progress);\n  }\n\n  // 세션 플래그 관리\n  static setTransitionFlag() {\n    sessionStorage.setItem('transition_flag', 'true');\n  }\n  static getTransitionFlag() {\n    return sessionStorage.getItem('transition_flag') === 'true';\n  }\n  static clearTransitionFlag() {\n    sessionStorage.removeItem('transition_flag');\n  }\n  static checkTransitionFlag() {\n    return this.getTransitionFlag();\n  }\n}","map":{"version":3,"names":["TransitionAPI","initializeTransition","targetRole","request","event","timestamp","Date","toISOString","controller","AbortController","timeoutId","setTimeout","abort","TIMEOUT_DURATION","response","fetch","API_ENDPOINT","method","headers","getAuthToken","body","JSON","stringify","signal","clearTimeout","ok","status","Error","json","error","name","message","errorType","getErrorMessage","localStorage","getItem","errorMessages","generateMockResponse","Promise","resolve","nextPage","delay","TransitionUtils","getArrowOpacity","progress","Math","min","max","getArrowScale","getAnimationStage","getLocalizedErrorMessage","calculateArrowOpacity","setTransitionFlag","sessionStorage","setItem","getTransitionFlag","clearTransitionFlag","removeItem","checkTransitionFlag"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/services/TransitionTypes.ts"],"sourcesContent":["// TransitionTypes.ts - 중간 로딩 화면 타입 정의\r\n\r\nexport interface TransitionRequest {\r\n  event: 'transition_request';\r\n  targetRole: 'admin' | 'user';\r\n  timestamp: string;\r\n}\r\n\r\nexport interface TransitionResponse {\r\n  status: 'transition_ready';\r\n  nextPage: string;\r\n  delay: number;\r\n}\r\n\r\nexport interface TransitionError {\r\n  error: 'unauthorized_role' | 'token_expired' | 'resource_load_failed' | 'transition_timeout';\r\n  message: string;\r\n}\r\n\r\nexport interface TransitionState {\r\n  isTransitioning: boolean;      \r\n  isLoading: boolean;\r\n  isReady: boolean;\r\n  progress: number;\r\n  arrowOpacity: number;     \r\n  error: string | null;\r\n  showRetryButton: boolean;\r\n  targetRole: 'admin' | 'user';\r\n  nextPage: string; \r\n}\r\n\r\n// 중간 로딩 API 클래스\r\nexport class TransitionAPI {\r\n  private static readonly API_ENDPOINT = '/api/transition/initialize';\r\n  private static readonly TIMEOUT_DURATION = 5000; // 5초\r\n\r\n  static async initializeTransition(targetRole: 'admin' | 'user'): Promise<TransitionResponse | TransitionError> {\r\n    try {\r\n      const request: TransitionRequest = {\r\n        event: 'transition_request',\r\n        targetRole,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), this.TIMEOUT_DURATION);\r\n\r\n      const response = await fetch(this.API_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        },\r\n        body: JSON.stringify(request),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('unauthorized_role');\r\n        }\r\n        if (response.status === 403) {\r\n          throw new Error('token_expired');\r\n        }\r\n        throw new Error('resource_load_failed');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        if (error.name === 'AbortError') {\r\n          return {\r\n            error: 'transition_timeout',\r\n            message: '전환 중 문제가 발생했습니다. 다시 시도해주세요.'\r\n          };\r\n        }\r\n        \r\n        const errorType = error.message as TransitionError['error'];\r\n        return {\r\n          error: errorType,\r\n          message: this.getErrorMessage(errorType)\r\n        };\r\n      }\r\n\r\n      return {\r\n        error: 'resource_load_failed',\r\n        message: '리소스 로딩에 실패했습니다.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 인증 토큰 가져오기\r\n  private static getAuthToken(): string {\r\n    return localStorage.getItem('auth_token') || 'demo_token';\r\n  }\r\n\r\n  // 에러 메시지 매핑\r\n  private static getErrorMessage(errorType: TransitionError['error']): string {\r\n    const errorMessages: Record<TransitionError['error'], string> = {\r\n      'unauthorized_role': '접근 권한이 없습니다. 다시 로그인하세요.',\r\n      'token_expired': '인증이 만료되었습니다. 다시 로그인해주세요.',\r\n      'resource_load_failed': '권한 기반 리소스 로딩에 실패했습니다.',\r\n      'transition_timeout': '전환 중 문제가 발생했습니다. 다시 시도해주세요.'\r\n    };\r\n\r\n    return errorMessages[errorType];\r\n  }\r\n\r\n  // 개발용 목 데이터 생성\r\n  static generateMockResponse(targetRole: 'admin' | 'user'): Promise<TransitionResponse> {\r\n    return new Promise((resolve) => {\r\n      // 1.5초 후 준비 완료로 응답\r\n      setTimeout(() => {\r\n        resolve({\r\n          status: 'transition_ready',\r\n          nextPage: targetRole === 'admin' ? '/admin/dashboard' : '/user/dashboard',\r\n          delay: 2000\r\n        });\r\n      }, 1500);\r\n    });\r\n  }\r\n}\r\nexport type AnimationStage = 'start' | 'middle' | 'intense' | 'complete';\r\n\r\n// 중간 로딩 유틸리티 함수들\r\nexport class TransitionUtils {\r\n  // 진행률을 화살표 투명도로 변환\r\n  static getArrowOpacity(progress: number): number {\r\n    return Math.min(1, Math.max(0.3, progress / 100));\r\n  }\r\n\r\n  // 진행률을 화살표 크기로 변환\r\n  static getArrowScale(progress: number): number {\r\n    return Math.min(1.1, Math.max(0.9, 0.9 + (progress / 100) * 0.2));\r\n  }\r\n\r\nstatic getAnimationStage(progress: number): AnimationStage {\r\n  if (progress < 30) return 'start';\r\n  if (progress < 60) return 'middle';\r\n  if (progress < 95) return 'intense';   // ← end → intense\r\n  return 'complete';\r\n}\r\n\r\n  // 에러 메시지 현지화\r\n  static getLocalizedErrorMessage(error: string): string {\r\n    const errorMessages: Record<string, string> = {\r\n      'unauthorized_role': '접근 권한이 없습니다. 다시 로그인하세요.',\r\n      'token_expired': '인증이 만료되었습니다. 다시 로그인해주세요.',\r\n      'resource_load_failed': '권한 기반 리소스 로딩에 실패했습니다.',\r\n      'transition_timeout': '전환 중 문제가 발생했습니다. 다시 시도해주세요.'\r\n    };\r\n\r\n    return errorMessages[error] || '알 수 없는 오류가 발생했습니다.';\r\n  }\r\n\r\n  static calculateArrowOpacity(progress: number): number {\r\n    return this.getArrowOpacity(progress);\r\n  }\r\n\r\n  // 세션 플래그 관리\r\n  static setTransitionFlag(): void {\r\n    sessionStorage.setItem('transition_flag', 'true');\r\n  }\r\n\r\n  static getTransitionFlag(): boolean {\r\n    return sessionStorage.getItem('transition_flag') === 'true';\r\n  }\r\n\r\n  static clearTransitionFlag(): void {\r\n    sessionStorage.removeItem('transition_flag');\r\n  }\r\n\r\n  static checkTransitionFlag(): boolean {\r\n    return this.getTransitionFlag();\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}