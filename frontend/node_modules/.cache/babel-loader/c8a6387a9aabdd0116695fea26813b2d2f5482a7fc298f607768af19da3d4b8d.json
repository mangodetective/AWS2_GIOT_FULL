{"ast":null,"code":"// ChatbotTypes.ts - 챗봇 타입 정의\n\n// 성공/실패 유니온의 편의 타입\n\n// 챗봇 API 클래스\nexport class ChatbotAPI {\n  static async sendMessage(message) {\n    try {\n      // 메시지 길이 검증\n      if (!message || message.trim().length === 0) {\n        return {\n          success: false,\n          error: '입력 메시지를 찾을 수 없습니다.'\n        };\n      }\n      if (message.length > this.MAX_MESSAGE_LENGTH) {\n        return {\n          success: false,\n          error: `메시지는 최대 ${this.MAX_MESSAGE_LENGTH}자까지 입력 가능합니다.`\n        };\n      }\n      const request = {\n        message: message.trim(),\n        userId: this.getUserId(),\n        timestamp: new Date().toISOString()\n      };\n      const response = await fetch(this.API_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        if (response.status === 400) {\n          return {\n            success: false,\n            error: '입력 메시지를 찾을 수 없습니다.'\n          };\n        }\n        throw new Error(`HTTP ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('챗봇 API 오류:', error);\n      return {\n        success: false,\n        error: '서버 오류로 답변을 생성할 수 없습니다.'\n      };\n    }\n  }\n\n  // 사용자 ID 가져오기\n  static getUserId() {\n    return localStorage.getItem('user_id') || 'admin001';\n  }\n\n  // 인증 토큰 가져오기\n  static getAuthToken() {\n    return localStorage.getItem('auth_token') || 'demo_token';\n  }\n\n  // 개발용 목 응답 생성\n  static generateMockResponse(message) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const responses = [{\n          reply: \"현재 강의실의 온도는 25.6도, 습도는 60%, 가스 농도는 양호한 상태입니다. 😊 강의실의 실시간 환경 상태에 예측 정보를 알려드리고, 오늘의 리뷰도 제공합니다. 무엇을 도와드릴까요?\",\n          status: 'Good',\n          sensorData: {\n            temperature: 25.6,\n            humidity: 60.0,\n            gasConcentration: 671\n          }\n        }, {\n          reply: \"당신은 공기질 분석 비서로서, IoT 센서 정보를 기반으로 한결 보 간단·친절하게 답하세요.\",\n          status: 'Normal',\n          sensorData: {\n            temperature: 24.2,\n            humidity: 58.5,\n            gasConcentration: 685\n          }\n        }, {\n          reply: \"안녕하세요! 저는 AWS² IoT 공기질 분석 비서입니다. 😊 강의실의 실시간 환경 상태에 예측 정보를 알려드리고, 오늘의 리뷰도 제공합니다. 무엇을 도와드릴까요?\",\n          status: 'Good',\n          sensorData: {\n            temperature: 25.5,\n            humidity: 60.1,\n            gasConcentration: 675\n          }\n        }];\n        const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n        resolve({\n          success: true,\n          reply: randomResponse.reply,\n          status: randomResponse.status,\n          sensorData: randomResponse.sensorData,\n          timestamp: new Date().toISOString()\n        });\n      }, 1000 + Math.random() * 1000); // 1-2초 지연\n    });\n  }\n}\n\n// 챗봇 유틸리티 함수들\nChatbotAPI.API_ENDPOINT = '/api/chatbot/message';\nChatbotAPI.MAX_MESSAGE_LENGTH = 300;\nexport class ChatbotUtils {\n  // 메시지 ID 생성\n  static generateMessageId() {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // 시간 포맷팅\n  static formatTime(timestamp) {\n    const date = new Date(timestamp);\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'pm' : 'am';\n    const formattedHours = hours % 12 || 12;\n    const formattedMinutes = minutes.toString().padStart(2, '0');\n    return `${formattedHours}:${formattedMinutes} ${ampm}`;\n  }\n\n  // 상태에 따른 색상 반환\n  static getStatusColor(status) {\n    switch (status) {\n      case 'Good':\n        return '#10b981';\n      // green\n      case 'Normal':\n        return '#f59e0b';\n      // yellow\n      case 'Warning':\n        return '#ef4444';\n      // red\n      default:\n        return '#6b7280';\n      // gray\n    }\n  }\n\n  // 초기 환영 메시지 생성\n  static createWelcomeMessage() {\n    return {\n      id: this.generateMessageId(),\n      message: \"안녕하세요! 저는 AWS² IoT 공기질 분석 비서입니다. 😊\\n강의실의 실시간 환경 상태에 예측 정보를 알려드리고, 오늘의 리뷰도 제공합니다.\\n무엇을 도와드릴까요?\",\n      sender: 'bot',\n      timestamp: new Date().toISOString(),\n      status: 'Good',\n      sensorData: {\n        temperature: 25.5,\n        humidity: 60.1,\n        gasConcentration: 675\n      }\n    };\n  }\n\n  // 메시지 검증\n  static validateMessage(message) {\n    if (!message || message.trim().length === 0) {\n      return {\n        isValid: false,\n        error: '메시지를 입력해주세요.'\n      };\n    }\n    if (message.length > 300) {\n      return {\n        isValid: false,\n        error: '메시지는 최대 300자까지 입력 가능합니다.'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n\n  // 메시지 히스토리 저장\n  static saveMessageHistory(messages) {\n    try {\n      const historyKey = `chatbot_history_${new Date().toDateString()}`;\n      localStorage.setItem(historyKey, JSON.stringify(messages));\n    } catch (error) {\n      console.warn('메시지 히스토리 저장 실패:', error);\n    }\n  }\n\n  // 메시지 히스토리 로드\n  static loadMessageHistory() {\n    try {\n      const historyKey = `chatbot_history_${new Date().toDateString()}`;\n      const saved = localStorage.getItem(historyKey);\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.warn('메시지 히스토리 로드 실패:', error);\n      return [];\n    }\n  }\n\n  // 타이핑 효과를 위한 지연 계산\n  static calculateTypingDelay(message) {\n    // 메시지 길이에 따라 타이핑 시간 계산 (최소 500ms, 최대 2000ms)\n    const baseDelay = 500;\n    const charDelay = message.length * 20;\n    return Math.min(baseDelay + charDelay, 2000);\n  }\n}","map":{"version":3,"names":["ChatbotAPI","sendMessage","message","trim","length","success","error","MAX_MESSAGE_LENGTH","request","userId","getUserId","timestamp","Date","toISOString","response","fetch","API_ENDPOINT","method","headers","getAuthToken","body","JSON","stringify","ok","status","Error","json","console","localStorage","getItem","generateMockResponse","Promise","resolve","setTimeout","responses","reply","sensorData","temperature","humidity","gasConcentration","randomResponse","Math","floor","random","ChatbotUtils","generateMessageId","now","toString","substr","formatTime","date","hours","getHours","minutes","getMinutes","ampm","formattedHours","formattedMinutes","padStart","getStatusColor","createWelcomeMessage","id","sender","validateMessage","isValid","saveMessageHistory","messages","historyKey","toDateString","setItem","warn","loadMessageHistory","saved","parse","calculateTypingDelay","baseDelay","charDelay","min"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/services/ChatbotTypes.ts"],"sourcesContent":["// ChatbotTypes.ts - 챗봇 타입 정의\r\n\r\nexport interface ChatMessage {\r\n  id: string;\r\n  message: string;\r\n  sender: 'user' | 'bot';\r\n  timestamp: string;\r\n  sensorData?: SensorData;\r\n  status?: 'Good' | 'Normal' | 'Warning';\r\n}\r\n\r\nexport interface SensorData {\r\n  temperature: number;\r\n  humidity: number;\r\n  gasConcentration: number;\r\n}\r\n\r\nexport interface ChatbotRequest {\r\n  message: string;\r\n  userId: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface ChatbotResponse {\r\n  success: true;\r\n  reply: string;\r\n  status: 'Good' | 'Normal' | 'Warning';\r\n  sensorData: SensorData;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface ChatbotError {\r\n  success: false;\r\n  error: string;\r\n}\r\n\r\nexport interface ChatbotState {\r\n  messages: ChatMessage[];\r\n  isLoading: boolean;\r\n  isTyping: boolean;\r\n  inputMessage: string;\r\n  error: string | null;\r\n  modelStatus: 'Active' | 'Inactive' | 'Loading';\r\n}\r\n\r\n// 성공/실패 유니온의 편의 타입\r\nexport type ChatbotAPIResponse = ChatbotResponse | ChatbotError;\r\n\r\n\r\n// 챗봇 API 클래스\r\nexport class ChatbotAPI {\r\n  private static readonly API_ENDPOINT = '/api/chatbot/message';\r\n  private static readonly MAX_MESSAGE_LENGTH = 300;\r\n\r\n  static async sendMessage(message: string): Promise<ChatbotResponse | ChatbotError> {\r\n    try {\r\n      // 메시지 길이 검증\r\n      if (!message || message.trim().length === 0) {\r\n        return {\r\n          success: false,\r\n          error: '입력 메시지를 찾을 수 없습니다.'\r\n        };\r\n      }\r\n\r\n      if (message.length > this.MAX_MESSAGE_LENGTH) {\r\n        return {\r\n          success: false,\r\n          error: `메시지는 최대 ${this.MAX_MESSAGE_LENGTH}자까지 입력 가능합니다.`\r\n        };\r\n      }\r\n\r\n      const request: ChatbotRequest = {\r\n        message: message.trim(),\r\n        userId: this.getUserId(),\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const response = await fetch(this.API_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 400) {\r\n          return {\r\n            success: false,\r\n            error: '입력 메시지를 찾을 수 없습니다.'\r\n          };\r\n        }\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('챗봇 API 오류:', error);\r\n      return {\r\n        success: false,\r\n        error: '서버 오류로 답변을 생성할 수 없습니다.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 사용자 ID 가져오기\r\n  private static getUserId(): string {\r\n    return localStorage.getItem('user_id') || 'admin001';\r\n  }\r\n\r\n  // 인증 토큰 가져오기\r\n  private static getAuthToken(): string {\r\n    return localStorage.getItem('auth_token') || 'demo_token';\r\n  }\r\n\r\n  // 개발용 목 응답 생성\r\n  static generateMockResponse(message: string): Promise<ChatbotAPIResponse> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const responses = [\r\n          {\r\n            reply: \"현재 강의실의 온도는 25.6도, 습도는 60%, 가스 농도는 양호한 상태입니다. 😊 강의실의 실시간 환경 상태에 예측 정보를 알려드리고, 오늘의 리뷰도 제공합니다. 무엇을 도와드릴까요?\",\r\n            status: 'Good' as const,\r\n            sensorData: {\r\n              temperature: 25.6,\r\n              humidity: 60.0,\r\n              gasConcentration: 671\r\n            }\r\n          },\r\n          {\r\n            reply: \"당신은 공기질 분석 비서로서, IoT 센서 정보를 기반으로 한결 보 간단·친절하게 답하세요.\",\r\n            status: 'Normal' as const,\r\n            sensorData: {\r\n              temperature: 24.2,\r\n              humidity: 58.5,\r\n              gasConcentration: 685\r\n            }\r\n          },\r\n          {\r\n            reply: \"안녕하세요! 저는 AWS² IoT 공기질 분석 비서입니다. 😊 강의실의 실시간 환경 상태에 예측 정보를 알려드리고, 오늘의 리뷰도 제공합니다. 무엇을 도와드릴까요?\",\r\n            status: 'Good' as const,\r\n            sensorData: {\r\n              temperature: 25.5,\r\n              humidity: 60.1,\r\n              gasConcentration: 675\r\n            }\r\n          }\r\n        ];\r\n\r\n        const randomResponse = responses[Math.floor(Math.random() * responses.length)];\r\n        \r\n        resolve({\r\n          success: true,\r\n          reply: randomResponse.reply,\r\n          status: randomResponse.status,\r\n          sensorData: randomResponse.sensorData,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }, 1000 + Math.random() * 1000); // 1-2초 지연\r\n    });\r\n  }\r\n}\r\n\r\n// 챗봇 유틸리티 함수들\r\nexport class ChatbotUtils {\r\n  // 메시지 ID 생성\r\n  static generateMessageId(): string {\r\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  // 시간 포맷팅\r\n  static formatTime(timestamp: string): string {\r\n    const date = new Date(timestamp);\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? 'pm' : 'am';\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes.toString().padStart(2, '0');\r\n    \r\n    return `${formattedHours}:${formattedMinutes} ${ampm}`;\r\n  }\r\n\r\n  // 상태에 따른 색상 반환\r\n  static getStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'Good':\r\n        return '#10b981'; // green\r\n      case 'Normal':\r\n        return '#f59e0b'; // yellow\r\n      case 'Warning':\r\n        return '#ef4444'; // red\r\n      default:\r\n        return '#6b7280'; // gray\r\n    }\r\n  }\r\n\r\n  // 초기 환영 메시지 생성\r\n  static createWelcomeMessage(): ChatMessage {\r\n    return {\r\n      id: this.generateMessageId(),\r\n      message: \"안녕하세요! 저는 AWS² IoT 공기질 분석 비서입니다. 😊\\n강의실의 실시간 환경 상태에 예측 정보를 알려드리고, 오늘의 리뷰도 제공합니다.\\n무엇을 도와드릴까요?\",\r\n      sender: 'bot',\r\n      timestamp: new Date().toISOString(),\r\n      status: 'Good',\r\n      sensorData: {\r\n        temperature: 25.5,\r\n        humidity: 60.1,\r\n        gasConcentration: 675\r\n      }\r\n    };\r\n  }\r\n\r\n  // 메시지 검증\r\n  static validateMessage(message: string): { isValid: boolean; error?: string } {\r\n    if (!message || message.trim().length === 0) {\r\n      return { isValid: false, error: '메시지를 입력해주세요.' };\r\n    }\r\n\r\n    if (message.length > 300) {\r\n      return { isValid: false, error: '메시지는 최대 300자까지 입력 가능합니다.' };\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  // 메시지 히스토리 저장\r\n  static saveMessageHistory(messages: ChatMessage[]): void {\r\n    try {\r\n      const historyKey = `chatbot_history_${new Date().toDateString()}`;\r\n      localStorage.setItem(historyKey, JSON.stringify(messages));\r\n    } catch (error) {\r\n      console.warn('메시지 히스토리 저장 실패:', error);\r\n    }\r\n  }\r\n\r\n  // 메시지 히스토리 로드\r\n  static loadMessageHistory(): ChatMessage[] {\r\n    try {\r\n      const historyKey = `chatbot_history_${new Date().toDateString()}`;\r\n      const saved = localStorage.getItem(historyKey);\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.warn('메시지 히스토리 로드 실패:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // 타이핑 효과를 위한 지연 계산\r\n  static calculateTypingDelay(message: string): number {\r\n    // 메시지 길이에 따라 타이핑 시간 계산 (최소 500ms, 최대 2000ms)\r\n    const baseDelay = 500;\r\n    const charDelay = message.length * 20;\r\n    return Math.min(baseDelay + charDelay, 2000);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}