{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arh05\\\\AWS2_GIOT_FULL\\\\frontend\\\\src\\\\pages\\\\Main\\\\MainScreen.tsx\",\n  _s = $RefreshSig$();\n// /**\n//  * ==================================================================================\n//  * 메인 진입 컴포넌트 (Frontend - Backend 초기 점검 API 협업 중심)\n//  * ==================================================================================\n//  * \n//  * 백엔드 API 연동 개요:\n//  * 이 컴포넌트는 앱 최초 진입 시 시스템 상태 점검을 위해 백엔드와 통신합니다:\n//  * \n//  * API 호출 플로우:\n//  * 1) POST /api/main/enter - 진입 이벤트 전송 및 시스템 상태 확인\n//  *    - 파라미터: event, timestamp, deviceInfo\n//  *    - 응답: status, sensorConnected, delay, nextPage, errorMessage\n//  * \n//  * 2) 응답에 따른 화면 전환:\n//  *    - status=\"ready\" + sensorConnected=true → delay(ms) 후 Dashboard로 자동 이동\n//  *    - status=\"initializing\" → 대기 상태 표시\n//  *    - status=\"error\" → 에러 메시지 표시 및 재시도 버튼 제공\n//  */\n\n// import React, { useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"./Main.css\";\n\n// interface MainScreenProps {\n//   onNavigateToDashboard: () => void; // ✅ App에서 넘기는 prop\n// }\n\n// const MainScreen: React.FC<MainScreenProps> = ({ onNavigateToDashboard }) => {\n//   return (\n//     <div>\n//       {/* ... 기존 내용 ... */}\n//       {/* 역할 선택 화면으로 넘기는 버튼/링크에서 이 함수 호출 */}\n//       <button onClick={onNavigateToDashboard}>Get Started</button>\n//       {/* 또는 기존의 시작/다음 버튼 onClick에 교체 */}\n//     </div>\n//   );\n// };\n\n// export default MainScreen;\n\n// export default function Main() {\n//   const nav = useNavigate();\n\n//   /**\n//    * 컴포넌트 마운트 시 강제로 Dashboard로 이동\n//    */\n//   useEffect(() => {\n//     console.log('🚀 Main 컴포넌트 마운트됨 - 즉시 Dashboard로 이동');\n\n//     // 강제로 1초 후 Dashboard로 이동\n//     const timer = setTimeout(() => {\n//       console.log('⏰ Dashboard로 이동 중...');\n//       nav(\"/dashboard\", { replace: true });\n//     }, 1000);\n\n//     return () => {\n//       clearTimeout(timer);\n//     };\n//   }, [nav]);\n\n//   /**\n//    * ==================================================================================\n//    * UI 렌더링 (백엔드 API 상태에 따른 화면 표시)\n//    * ==================================================================================\n//    * \n//    * 백엔드 연동 포인트:\n//    * - state.loading: enterMainView() API 호출 진행 상태\n//    * - state.status: 백엔드 응답의 status 필드 (\"ready\"/\"initializing\"/\"error\")\n//    * - state.error: 백엔드 응답의 errorMessage 또는 클라이언트 에러 메시지\n//    */\n//   return (\n//     <main className=\"main\">\n//       <section className=\"branding\">\n//         {/* \n//           메인 브랜드 이미지 (백엔드와 무관, 정적 리소스)\n//           - public/images/logo1.png 경로의 로고 이미지\n//           - API 호출과 관계없이 즉시 표시\n//         */}\n//         <img\n//           className=\"brand-image\"\n//           src=\"/images/logo1.png\"\n//           alt=\"AWS² GiOT Main\"\n//           draggable=\"false\"\n//         />\n\n//         {/* \n//           백엔드 API 상태에 따른 메시지 표시\n//           - state는 enterMainView() API 응답 결과를 반영\n//         */}\n//         <div className=\"status\">\n//           <div>시스템을 시작하고 있습니다...</div>\n//           <div>잠시만 기다려주세요.</div>\n\n//           {/* 로딩 스피너 */}\n//           <img\n//             className=\"status-graphic\"\n//             src=\"/images/spinner.gif\"\n//             alt=\"로딩 중\"\n//             width={64}\n//             height={64}\n//             loading=\"eager\"\n//             draggable=\"false\"\n//           />\n//         </div>\n//       </section>\n//     </main>\n//   );\n// }\n\n/**\r\n * ==================================================================================\r\n * 메인 진입 컴포넌트 (Frontend - Backend 초기 점검 API 협업 중심)\r\n * ==================================================================================\r\n * \r\n * 백엔드 API 연동 개요:\r\n * - 앱 최초 진입 시 시스템 상태 점검을 위해 백엔드와 통신 (설계 포인트)\r\n * - 현재는 데모용으로 버튼 클릭 또는 1초 후 자동 이동만 구현\r\n */\n\nimport React, { useEffect } from \"react\";\nimport \"./MainScreen.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainScreen = ({\n  onNavigateToDashboard\n}) => {\n  _s();\n  // (선택) 1초 후 자동 이동을 원하면 활성화\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onNavigateToDashboard(); // ✅ 라우터 대신 App의 상태 전환 콜백 사용\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [onNavigateToDashboard]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"branding\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"brand-image\",\n        src: \"/images/logo1.png\",\n        alt: \"AWS\\xB2 GiOT Main\",\n        draggable: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\uC2DC\\uC2A4\\uD15C\\uC744 \\uC2DC\\uC791\\uD558\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\uC7A0\\uC2DC\\uB9CC \\uAE30\\uB2E4\\uB824\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"status-graphic\",\n          src: \"/images/spinner.gif\",\n          alt: \"\\uB85C\\uB529 \\uC911\",\n          width: 64,\n          height: 64,\n          loading: \"eager\",\n          draggable: \"false\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onNavigateToDashboard,\n        className: \"start-btn\",\n        children: \"Get Started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(MainScreen, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MainScreen;\nexport default MainScreen; // ✅ default export는 오직 한 번만\nvar _c;\n$RefreshReg$(_c, \"MainScreen\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","MainScreen","onNavigateToDashboard","_s","timer","setTimeout","clearTimeout","className","children","src","alt","draggable","fileName","_jsxFileName","lineNumber","columnNumber","width","height","loading","onClick","_c","$RefreshReg$"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/pages/Main/MainScreen.tsx"],"sourcesContent":["// /**\r\n//  * ==================================================================================\r\n//  * 메인 진입 컴포넌트 (Frontend - Backend 초기 점검 API 협업 중심)\r\n//  * ==================================================================================\r\n//  * \r\n//  * 백엔드 API 연동 개요:\r\n//  * 이 컴포넌트는 앱 최초 진입 시 시스템 상태 점검을 위해 백엔드와 통신합니다:\r\n//  * \r\n//  * API 호출 플로우:\r\n//  * 1) POST /api/main/enter - 진입 이벤트 전송 및 시스템 상태 확인\r\n//  *    - 파라미터: event, timestamp, deviceInfo\r\n//  *    - 응답: status, sensorConnected, delay, nextPage, errorMessage\r\n//  * \r\n//  * 2) 응답에 따른 화면 전환:\r\n//  *    - status=\"ready\" + sensorConnected=true → delay(ms) 후 Dashboard로 자동 이동\r\n//  *    - status=\"initializing\" → 대기 상태 표시\r\n//  *    - status=\"error\" → 에러 메시지 표시 및 재시도 버튼 제공\r\n//  */\r\n\r\n// import React, { useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"./Main.css\";\r\n\r\n// interface MainScreenProps {\r\n//   onNavigateToDashboard: () => void; // ✅ App에서 넘기는 prop\r\n// }\r\n\r\n// const MainScreen: React.FC<MainScreenProps> = ({ onNavigateToDashboard }) => {\r\n//   return (\r\n//     <div>\r\n//       {/* ... 기존 내용 ... */}\r\n//       {/* 역할 선택 화면으로 넘기는 버튼/링크에서 이 함수 호출 */}\r\n//       <button onClick={onNavigateToDashboard}>Get Started</button>\r\n//       {/* 또는 기존의 시작/다음 버튼 onClick에 교체 */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MainScreen;\r\n\r\n// export default function Main() {\r\n//   const nav = useNavigate();\r\n\r\n//   /**\r\n//    * 컴포넌트 마운트 시 강제로 Dashboard로 이동\r\n//    */\r\n//   useEffect(() => {\r\n//     console.log('🚀 Main 컴포넌트 마운트됨 - 즉시 Dashboard로 이동');\r\n    \r\n//     // 강제로 1초 후 Dashboard로 이동\r\n//     const timer = setTimeout(() => {\r\n//       console.log('⏰ Dashboard로 이동 중...');\r\n//       nav(\"/dashboard\", { replace: true });\r\n//     }, 1000);\r\n\r\n//     return () => {\r\n//       clearTimeout(timer);\r\n//     };\r\n//   }, [nav]);\r\n\r\n//   /**\r\n//    * ==================================================================================\r\n//    * UI 렌더링 (백엔드 API 상태에 따른 화면 표시)\r\n//    * ==================================================================================\r\n//    * \r\n//    * 백엔드 연동 포인트:\r\n//    * - state.loading: enterMainView() API 호출 진행 상태\r\n//    * - state.status: 백엔드 응답의 status 필드 (\"ready\"/\"initializing\"/\"error\")\r\n//    * - state.error: 백엔드 응답의 errorMessage 또는 클라이언트 에러 메시지\r\n//    */\r\n//   return (\r\n//     <main className=\"main\">\r\n//       <section className=\"branding\">\r\n//         {/* \r\n//           메인 브랜드 이미지 (백엔드와 무관, 정적 리소스)\r\n//           - public/images/logo1.png 경로의 로고 이미지\r\n//           - API 호출과 관계없이 즉시 표시\r\n//         */}\r\n//         <img\r\n//           className=\"brand-image\"\r\n//           src=\"/images/logo1.png\"\r\n//           alt=\"AWS² GiOT Main\"\r\n//           draggable=\"false\"\r\n//         />\r\n\r\n//         {/* \r\n//           백엔드 API 상태에 따른 메시지 표시\r\n//           - state는 enterMainView() API 응답 결과를 반영\r\n//         */}\r\n//         <div className=\"status\">\r\n//           <div>시스템을 시작하고 있습니다...</div>\r\n//           <div>잠시만 기다려주세요.</div>\r\n          \r\n//           {/* 로딩 스피너 */}\r\n//           <img\r\n//             className=\"status-graphic\"\r\n//             src=\"/images/spinner.gif\"\r\n//             alt=\"로딩 중\"\r\n//             width={64}\r\n//             height={64}\r\n//             loading=\"eager\"\r\n//             draggable=\"false\"\r\n//           />\r\n//         </div>\r\n//       </section>\r\n//     </main>\r\n//   );\r\n// }\r\n\r\n\r\n/**\r\n * ==================================================================================\r\n * 메인 진입 컴포넌트 (Frontend - Backend 초기 점검 API 협업 중심)\r\n * ==================================================================================\r\n * \r\n * 백엔드 API 연동 개요:\r\n * - 앱 최초 진입 시 시스템 상태 점검을 위해 백엔드와 통신 (설계 포인트)\r\n * - 현재는 데모용으로 버튼 클릭 또는 1초 후 자동 이동만 구현\r\n */\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport \"./MainScreen.module.css\";\r\n\r\ninterface MainScreenProps {\r\n  onNavigateToDashboard: () => void; // ✅ App에서 넘기는 prop\r\n}\r\n\r\nconst MainScreen: React.FC<MainScreenProps> = ({ onNavigateToDashboard }) => {\r\n  // (선택) 1초 후 자동 이동을 원하면 활성화\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      onNavigateToDashboard();       // ✅ 라우터 대신 App의 상태 전환 콜백 사용\r\n    }, 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [onNavigateToDashboard]);\r\n\r\n  return (\r\n    <main className=\"main\">\r\n      <section className=\"branding\">\r\n        <img\r\n          className=\"brand-image\"\r\n          src=\"/images/logo1.png\"\r\n          alt=\"AWS² GiOT Main\"\r\n          draggable=\"false\"\r\n        />\r\n\r\n        <div className=\"status\">\r\n          <div>시스템을 시작하고 있습니다...</div>\r\n          <div>잠시만 기다려주세요.</div>\r\n\r\n          <img\r\n            className=\"status-graphic\"\r\n            src=\"/images/spinner.gif\"\r\n            alt=\"로딩 중\"\r\n            width={64}\r\n            height={64}\r\n            loading=\"eager\"\r\n            draggable=\"false\"\r\n          />\r\n        </div>\r\n\r\n        {/* 수동 이동 버튼(테스트용) */}\r\n        <button onClick={onNavigateToDashboard} className=\"start-btn\">\r\n          Get Started\r\n        </button>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainScreen; // ✅ default export는 오직 한 번만\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}