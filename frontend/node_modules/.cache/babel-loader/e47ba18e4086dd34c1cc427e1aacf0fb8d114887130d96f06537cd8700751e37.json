{"ast":null,"code":"// HistoryTypes.ts - 히스토리 타입 정의\n\n// 원시 센서 데이터 형태\n\n// 히스토리 API 클래스\nexport class HistoryAPI {\n  // 기본 히스토리 데이터 가져오기\n  static async getHistoryData(params = {}) {\n    try {\n      const queryParams = new URLSearchParams();\n      if (params.date) queryParams.append('date', params.date);\n      if (params.sensorType) queryParams.append('sensorType', params.sensorType);\n      if (params.status) queryParams.append('status', params.status);\n      if (params.page) queryParams.append('page', params.page.toString());\n      const url = params.date ? `${this.BASE_URL}/${params.date.replace(/-/g, '')}?${queryParams.toString()}` : `${this.BASE_URL}?${queryParams.toString()}`;\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('히스토리 API 오류:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : '데이터를 조회할 수 없습니다.'\n      };\n    }\n  }\n\n  // 특정 날짜의 원시 데이터 가져오기\n  static async getRawData(date) {\n    try {\n      const formattedDate = date.replace(/-/g, ''); // YYYYMMDD 형식으로 변환\n      const response = await fetch(`${this.BASE_URL}/${formattedDate}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('원시 데이터 API 오류:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : '원시 데이터를 조회할 수 없습니다.'\n      };\n    }\n  }\n\n  // 인증 토큰 가져오기\n  static getAuthToken() {\n    return localStorage.getItem('auth_token') || 'demo_token';\n  }\n\n  // 개발용 목 데이터 생성\n  static generateMockHistoryData(filters, page = 1) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const baseEvents = [{\n          eventId: '00001',\n          timestamp: '2025-08-04T10:03:22Z',\n          sensorType: 'Temperature',\n          value: 25.5,\n          status: 'GOOD'\n        }, {\n          eventId: '00002',\n          timestamp: '2025-08-04T10:03:22Z',\n          sensorType: 'Humidity',\n          value: 60.1,\n          status: 'NORMAL'\n        }, {\n          eventId: '00003',\n          timestamp: '2025-08-04T10:03:22Z',\n          sensorType: 'CO Concentration',\n          value: 675,\n          status: 'WARNING'\n        }, {\n          eventId: '00004',\n          timestamp: '2025-08-04T10:03:22Z',\n          sensorType: 'Temperature',\n          value: 25.5,\n          status: 'GOOD'\n        }, {\n          eventId: '00005',\n          timestamp: '2025-08-04T10:03:22Z',\n          sensorType: 'Humidity',\n          value: 60.1,\n          status: 'NORMAL'\n        }, {\n          eventId: '00006',\n          timestamp: '2025-08-04T10:03:22Z',\n          sensorType: 'CO Concentration',\n          value: 671,\n          status: 'GOOD'\n        }];\n\n        // 필터 적용\n        let filteredEvents = baseEvents;\n        if (filters.sensorType) {\n          filteredEvents = filteredEvents.filter(event => event.sensorType === filters.sensorType);\n        }\n        if (filters.status) {\n          filteredEvents = filteredEvents.filter(event => event.status === filters.status);\n        }\n\n        // 페이지네이션 적용 (페이지당 9개)\n        const pageSize = 9;\n        const totalPages = Math.ceil(filteredEvents.length / pageSize);\n        const startIndex = (page - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const paginatedEvents = filteredEvents.slice(startIndex, endIndex);\n        resolve({\n          success: true,\n          totalPages,\n          currentPage: page,\n          data: paginatedEvents\n        });\n      }, 500 + Math.random() * 500); // 0.5-1초 지연\n    });\n  }\n}\n\n// 히스토리 유틸리티 함수들\nHistoryAPI.BASE_URL = '/api/s3/date';\nexport class HistoryUtils {\n  // 날짜 포맷팅\n  static formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    }).replace(/\\./g, '-').replace(/ /g, '');\n  }\n\n  // 타임스탬프 포맷팅\n  static formatTimestamp(timestamp) {\n    const date = new Date(timestamp);\n    return date.toLocaleString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    }).replace(/\\./g, '-').replace(/,/g, '');\n  }\n\n  // 상태에 따른 CSS 클래스 반환\n  static getStatusClass(status) {\n    switch (status) {\n      case 'GOOD':\n        return 'statusGood';\n      case 'NORMAL':\n        return 'statusNormal';\n      case 'WARNING':\n        return 'statusWarning';\n      default:\n        return 'statusNormal';\n    }\n  }\n\n  // 센서 타입에 따른 단위 반환\n  static getSensorUnit(sensorType) {\n    switch (sensorType) {\n      case 'Temperature':\n        return '°C';\n      case 'Humidity':\n        return '%';\n      case 'CO Concentration':\n        return 'ppm';\n      default:\n        return '';\n    }\n  }\n\n  // 원시 데이터를 히스토리 이벤트로 변환\n  static convertRawDataToEvents(rawData) {\n    const events = [];\n    let eventIdCounter = 1;\n    Object.entries(rawData).forEach(([filename, dataArray]) => {\n      dataArray.forEach(data => {\n        // Temperature 이벤트\n        events.push({\n          eventId: String(eventIdCounter++).padStart(5, '0'),\n          timestamp: data.timestamp,\n          sensorType: 'Temperature',\n          value: data.temp,\n          status: this.calculateStatus('Temperature', data.temp)\n        });\n\n        // Humidity 이벤트\n        events.push({\n          eventId: String(eventIdCounter++).padStart(5, '0'),\n          timestamp: data.timestamp,\n          sensorType: 'Humidity',\n          value: data.hum,\n          status: this.calculateStatus('Humidity', data.hum)\n        });\n\n        // Gas 이벤트\n        events.push({\n          eventId: String(eventIdCounter++).padStart(5, '0'),\n          timestamp: data.timestamp,\n          sensorType: 'CO Concentration',\n          value: data.gas,\n          status: this.calculateStatus('CO Concentration', data.gas)\n        });\n      });\n    });\n\n    // 타임스탬프 기준 내림차순 정렬\n    return events.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }\n\n  // 센서 값에 따른 상태 계산\n  static calculateStatus(sensorType, value) {\n    switch (sensorType) {\n      case 'Temperature':\n        if (value < 18 || value > 28) return 'WARNING';\n        if (value < 20 || value > 26) return 'NORMAL';\n        return 'GOOD';\n      case 'Humidity':\n        if (value < 30 || value > 80) return 'WARNING';\n        if (value < 40 || value > 70) return 'NORMAL';\n        return 'GOOD';\n      case 'CO Concentration':\n        if (value > 1000) return 'WARNING';\n        if (value > 700) return 'NORMAL';\n        return 'GOOD';\n      default:\n        return 'NORMAL';\n    }\n  }\n\n  // Date 객체를 YYYY-MM-DD 문자열로 변환\n  static formatDateToString(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n\n  // YYYY-MM-DD 문자열을 Date 객체로 변환\n  static parseStringToDate(dateString) {\n    const [year, month, day] = dateString.split('-').map(Number);\n    return new Date(year, month - 1, day);\n  }\n}","map":{"version":3,"names":["HistoryAPI","getHistoryData","params","queryParams","URLSearchParams","date","append","sensorType","status","page","toString","url","BASE_URL","replace","response","fetch","headers","getAuthToken","ok","Error","json","error","console","success","message","getRawData","formattedDate","localStorage","getItem","generateMockHistoryData","filters","Promise","resolve","setTimeout","baseEvents","eventId","timestamp","value","filteredEvents","filter","event","pageSize","totalPages","Math","ceil","length","startIndex","endIndex","paginatedEvents","slice","currentPage","data","random","HistoryUtils","formatDate","dateString","Date","toLocaleDateString","year","month","day","formatTimestamp","toLocaleString","hour","minute","second","hour12","getStatusClass","getSensorUnit","convertRawDataToEvents","rawData","events","eventIdCounter","Object","entries","forEach","filename","dataArray","push","String","padStart","temp","calculateStatus","hum","gas","sort","a","b","getTime","formatDateToString","getFullYear","getMonth","getDate","parseStringToDate","split","map","Number"],"sources":["C:/Users/arh05/AWS2_GIOT_FULL/frontend/src/services/HistoryTypes.ts"],"sourcesContent":["// HistoryTypes.ts - 히스토리 타입 정의\r\n\r\nexport interface HistoryEvent {\r\n  eventId: string;\r\n  timestamp: string;\r\n  sensorType: 'Temperature' | 'Humidity' | 'CO Concentration';\r\n  value: number;\r\n  status: 'GOOD' | 'NORMAL' | 'WARNING';\r\n}\r\n\r\nexport interface HistoryRequest {\r\n  date?: string; // YYYY-MM-DD\r\n  sensorType?: 'Temperature' | 'Humidity' | 'CO Concentration';\r\n  status?: 'GOOD' | 'NORMAL' | 'WARNING';\r\n  page?: number;\r\n}\r\n\r\nexport interface HistoryResponse {\r\n  success: true;\r\n  totalPages: number;\r\n  currentPage: number;\r\n  data: HistoryEvent[];\r\n}\r\n\r\nexport interface HistoryError {\r\n  success: false;\r\n  error: string;\r\n}\r\n\r\nexport interface HistoryFilters {\r\n  date: string | null;\r\n  sensorType: string | null;\r\n  status: string | null;\r\n}\r\n\r\nexport interface HistoryState {\r\n  events: HistoryEvent[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  filters: HistoryFilters;\r\n  currentPage: number;\r\n  totalPages: number;\r\n  showFilters: boolean;\r\n  showDatePicker: boolean;\r\n  selectedDate: Date | null;\r\n}\r\n\r\nexport interface SidebarItemProps {\r\n  icon: React.ReactNode;\r\n  label: string;\r\n  isActive: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\n\r\n// 원시 센서 데이터 형태\r\nexport interface RawSensorData {\r\n  timestamp: string;\r\n  temp: number;\r\n  hum: number;\r\n  gas: number;\r\n}\r\n\r\nexport interface RawDataResponse {\r\n  [filename: string]: RawSensorData[];\r\n}\r\n\r\n// 히스토리 API 클래스\r\nexport class HistoryAPI {\r\n  private static readonly BASE_URL = '/api/s3/date';\r\n\r\n  // 기본 히스토리 데이터 가져오기\r\n  static async getHistoryData(params: HistoryRequest = {}): Promise<HistoryResponse | HistoryError> {\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      \r\n      if (params.date) queryParams.append('date', params.date);\r\n      if (params.sensorType) queryParams.append('sensorType', params.sensorType);\r\n      if (params.status) queryParams.append('status', params.status);\r\n      if (params.page) queryParams.append('page', params.page.toString());\r\n\r\n      const url = params.date \r\n        ? `${this.BASE_URL}/${params.date.replace(/-/g, '')}?${queryParams.toString()}`\r\n        : `${this.BASE_URL}?${queryParams.toString()}`;\r\n\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('히스토리 API 오류:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : '데이터를 조회할 수 없습니다.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 특정 날짜의 원시 데이터 가져오기\r\n  static async getRawData(date: string): Promise<RawDataResponse | HistoryError> {\r\n    try {\r\n      const formattedDate = date.replace(/-/g, ''); // YYYYMMDD 형식으로 변환\r\n      const response = await fetch(`${this.BASE_URL}/${formattedDate}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('원시 데이터 API 오류:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : '원시 데이터를 조회할 수 없습니다.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 인증 토큰 가져오기\r\n  private static getAuthToken(): string {\r\n    return localStorage.getItem('auth_token') || 'demo_token';\r\n  }\r\n\r\n  // 개발용 목 데이터 생성\r\n  static generateMockHistoryData(filters: HistoryFilters, page: number = 1): Promise<HistoryResponse> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const baseEvents: HistoryEvent[] = [\r\n          {\r\n            eventId: '00001',\r\n            timestamp: '2025-08-04T10:03:22Z',\r\n            sensorType: 'Temperature',\r\n            value: 25.5,\r\n            status: 'GOOD'\r\n          },\r\n          {\r\n            eventId: '00002',\r\n            timestamp: '2025-08-04T10:03:22Z',\r\n            sensorType: 'Humidity',\r\n            value: 60.1,\r\n            status: 'NORMAL'\r\n          },\r\n          {\r\n            eventId: '00003',\r\n            timestamp: '2025-08-04T10:03:22Z',\r\n            sensorType: 'CO Concentration',\r\n            value: 675,\r\n            status: 'WARNING'\r\n          },\r\n          {\r\n            eventId: '00004',\r\n            timestamp: '2025-08-04T10:03:22Z',\r\n            sensorType: 'Temperature',\r\n            value: 25.5,\r\n            status: 'GOOD'\r\n          },\r\n          {\r\n            eventId: '00005',\r\n            timestamp: '2025-08-04T10:03:22Z',\r\n            sensorType: 'Humidity',\r\n            value: 60.1,\r\n            status: 'NORMAL'\r\n          },\r\n          {\r\n            eventId: '00006',\r\n            timestamp: '2025-08-04T10:03:22Z',\r\n            sensorType: 'CO Concentration',\r\n            value: 671,\r\n            status: 'GOOD'\r\n          }\r\n        ];\r\n\r\n        // 필터 적용\r\n        let filteredEvents = baseEvents;\r\n\r\n        if (filters.sensorType) {\r\n          filteredEvents = filteredEvents.filter(event => \r\n            event.sensorType === filters.sensorType\r\n          );\r\n        }\r\n\r\n        if (filters.status) {\r\n          filteredEvents = filteredEvents.filter(event => \r\n            event.status === filters.status\r\n          );\r\n        }\r\n\r\n        // 페이지네이션 적용 (페이지당 9개)\r\n        const pageSize = 9;\r\n        const totalPages = Math.ceil(filteredEvents.length / pageSize);\r\n        const startIndex = (page - 1) * pageSize;\r\n        const endIndex = startIndex + pageSize;\r\n        const paginatedEvents = filteredEvents.slice(startIndex, endIndex);\r\n\r\n        resolve({\r\n          success: true,\r\n          totalPages,\r\n          currentPage: page,\r\n          data: paginatedEvents\r\n        });\r\n      }, 500 + Math.random() * 500); // 0.5-1초 지연\r\n    });\r\n  }\r\n}\r\n\r\n// 히스토리 유틸리티 함수들\r\nexport class HistoryUtils {\r\n  // 날짜 포맷팅\r\n  static formatDate(dateString: string): string {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('ko-KR', {\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit'\r\n    }).replace(/\\./g, '-').replace(/ /g, '');\r\n  }\r\n\r\n  // 타임스탬프 포맷팅\r\n  static formatTimestamp(timestamp: string): string {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleString('ko-KR', {\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      hour12: false\r\n    }).replace(/\\./g, '-').replace(/,/g, '');\r\n  }\r\n\r\n  // 상태에 따른 CSS 클래스 반환\r\n  static getStatusClass(status: string): string {\r\n    switch (status) {\r\n      case 'GOOD':\r\n        return 'statusGood';\r\n      case 'NORMAL':\r\n        return 'statusNormal';\r\n      case 'WARNING':\r\n        return 'statusWarning';\r\n      default:\r\n        return 'statusNormal';\r\n    }\r\n  }\r\n\r\n  // 센서 타입에 따른 단위 반환\r\n  static getSensorUnit(sensorType: string): string {\r\n    switch (sensorType) {\r\n      case 'Temperature':\r\n        return '°C';\r\n      case 'Humidity':\r\n        return '%';\r\n      case 'CO Concentration':\r\n        return 'ppm';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  // 원시 데이터를 히스토리 이벤트로 변환\r\n  static convertRawDataToEvents(rawData: RawDataResponse): HistoryEvent[] {\r\n    const events: HistoryEvent[] = [];\r\n    let eventIdCounter = 1;\r\n\r\n    Object.entries(rawData).forEach(([filename, dataArray]) => {\r\n      dataArray.forEach((data) => {\r\n        // Temperature 이벤트\r\n        events.push({\r\n          eventId: String(eventIdCounter++).padStart(5, '0'),\r\n          timestamp: data.timestamp,\r\n          sensorType: 'Temperature',\r\n          value: data.temp,\r\n          status: this.calculateStatus('Temperature', data.temp)\r\n        });\r\n\r\n        // Humidity 이벤트\r\n        events.push({\r\n          eventId: String(eventIdCounter++).padStart(5, '0'),\r\n          timestamp: data.timestamp,\r\n          sensorType: 'Humidity',\r\n          value: data.hum,\r\n          status: this.calculateStatus('Humidity', data.hum)\r\n        });\r\n\r\n        // Gas 이벤트\r\n        events.push({\r\n          eventId: String(eventIdCounter++).padStart(5, '0'),\r\n          timestamp: data.timestamp,\r\n          sensorType: 'CO Concentration',\r\n          value: data.gas,\r\n          status: this.calculateStatus('CO Concentration', data.gas)\r\n        });\r\n      });\r\n    });\r\n\r\n    // 타임스탬프 기준 내림차순 정렬\r\n    return events.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\r\n  }\r\n\r\n  // 센서 값에 따른 상태 계산\r\n  private static calculateStatus(sensorType: string, value: number): 'GOOD' | 'NORMAL' | 'WARNING' {\r\n    switch (sensorType) {\r\n      case 'Temperature':\r\n        if (value < 18 || value > 28) return 'WARNING';\r\n        if (value < 20 || value > 26) return 'NORMAL';\r\n        return 'GOOD';\r\n      \r\n      case 'Humidity':\r\n        if (value < 30 || value > 80) return 'WARNING';\r\n        if (value < 40 || value > 70) return 'NORMAL';\r\n        return 'GOOD';\r\n      \r\n      case 'CO Concentration':\r\n        if (value > 1000) return 'WARNING';\r\n        if (value > 700) return 'NORMAL';\r\n        return 'GOOD';\r\n      \r\n      default:\r\n        return 'NORMAL';\r\n    }\r\n  }\r\n\r\n  // Date 객체를 YYYY-MM-DD 문자열로 변환\r\n  static formatDateToString(date: Date): string {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  // YYYY-MM-DD 문자열을 Date 객체로 변환\r\n  static parseStringToDate(dateString: string): Date {\r\n    const [year, month, day] = dateString.split('-').map(Number);\r\n    return new Date(year, month - 1, day);\r\n  }\r\n}"],"mappings":"AAAA;;AAuDA;;AAYA;AACA,OAAO,MAAMA,UAAU,CAAC;EAGtB;EACA,aAAaC,cAAcA,CAACC,MAAsB,GAAG,CAAC,CAAC,EAA2C;IAChG,IAAI;MACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;MAEzC,IAAIF,MAAM,CAACG,IAAI,EAAEF,WAAW,CAACG,MAAM,CAAC,MAAM,EAAEJ,MAAM,CAACG,IAAI,CAAC;MACxD,IAAIH,MAAM,CAACK,UAAU,EAAEJ,WAAW,CAACG,MAAM,CAAC,YAAY,EAAEJ,MAAM,CAACK,UAAU,CAAC;MAC1E,IAAIL,MAAM,CAACM,MAAM,EAAEL,WAAW,CAACG,MAAM,CAAC,QAAQ,EAAEJ,MAAM,CAACM,MAAM,CAAC;MAC9D,IAAIN,MAAM,CAACO,IAAI,EAAEN,WAAW,CAACG,MAAM,CAAC,MAAM,EAAEJ,MAAM,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MAEnE,MAAMC,GAAG,GAAGT,MAAM,CAACG,IAAI,GACnB,GAAG,IAAI,CAACO,QAAQ,IAAIV,MAAM,CAACG,IAAI,CAACQ,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,IAAIV,WAAW,CAACO,QAAQ,CAAC,CAAC,EAAE,GAC7E,GAAG,IAAI,CAACE,QAAQ,IAAIT,WAAW,CAACO,QAAQ,CAAC,CAAC,EAAE;MAEhD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;QAChCK,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE,kBAAkB;UAC5B,eAAe,EAAE,UAAU,IAAI,CAACC,YAAY,CAAC,CAAC;QAChD;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,QAAQL,QAAQ,CAACN,MAAM,EAAE,CAAC;MAC5C;MAEA,OAAO,MAAMM,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO;QACLE,OAAO,EAAE,KAAK;QACdF,KAAK,EAAEA,KAAK,YAAYF,KAAK,GAAGE,KAAK,CAACG,OAAO,GAAG;MAClD,CAAC;IACH;EACF;;EAEA;EACA,aAAaC,UAAUA,CAACpB,IAAY,EAA2C;IAC7E,IAAI;MACF,MAAMqB,aAAa,GAAGrB,IAAI,CAACQ,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;MAC9C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACH,QAAQ,IAAIc,aAAa,EAAE,EAAE;QAChEV,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE,kBAAkB;UAC5B,eAAe,EAAE,UAAU,IAAI,CAACC,YAAY,CAAC,CAAC;QAChD;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,QAAQL,QAAQ,CAACN,MAAM,EAAE,CAAC;MAC5C;MAEA,OAAO,MAAMM,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,OAAO;QACLE,OAAO,EAAE,KAAK;QACdF,KAAK,EAAEA,KAAK,YAAYF,KAAK,GAAGE,KAAK,CAACG,OAAO,GAAG;MAClD,CAAC;IACH;EACF;;EAEA;EACA,OAAeP,YAAYA,CAAA,EAAW;IACpC,OAAOU,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY;EAC3D;;EAEA;EACA,OAAOC,uBAAuBA,CAACC,OAAuB,EAAErB,IAAY,GAAG,CAAC,EAA4B;IAClG,OAAO,IAAIsB,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACf,MAAMC,UAA0B,GAAG,CACjC;UACEC,OAAO,EAAE,OAAO;UAChBC,SAAS,EAAE,sBAAsB;UACjC7B,UAAU,EAAE,aAAa;UACzB8B,KAAK,EAAE,IAAI;UACX7B,MAAM,EAAE;QACV,CAAC,EACD;UACE2B,OAAO,EAAE,OAAO;UAChBC,SAAS,EAAE,sBAAsB;UACjC7B,UAAU,EAAE,UAAU;UACtB8B,KAAK,EAAE,IAAI;UACX7B,MAAM,EAAE;QACV,CAAC,EACD;UACE2B,OAAO,EAAE,OAAO;UAChBC,SAAS,EAAE,sBAAsB;UACjC7B,UAAU,EAAE,kBAAkB;UAC9B8B,KAAK,EAAE,GAAG;UACV7B,MAAM,EAAE;QACV,CAAC,EACD;UACE2B,OAAO,EAAE,OAAO;UAChBC,SAAS,EAAE,sBAAsB;UACjC7B,UAAU,EAAE,aAAa;UACzB8B,KAAK,EAAE,IAAI;UACX7B,MAAM,EAAE;QACV,CAAC,EACD;UACE2B,OAAO,EAAE,OAAO;UAChBC,SAAS,EAAE,sBAAsB;UACjC7B,UAAU,EAAE,UAAU;UACtB8B,KAAK,EAAE,IAAI;UACX7B,MAAM,EAAE;QACV,CAAC,EACD;UACE2B,OAAO,EAAE,OAAO;UAChBC,SAAS,EAAE,sBAAsB;UACjC7B,UAAU,EAAE,kBAAkB;UAC9B8B,KAAK,EAAE,GAAG;UACV7B,MAAM,EAAE;QACV,CAAC,CACF;;QAED;QACA,IAAI8B,cAAc,GAAGJ,UAAU;QAE/B,IAAIJ,OAAO,CAACvB,UAAU,EAAE;UACtB+B,cAAc,GAAGA,cAAc,CAACC,MAAM,CAACC,KAAK,IAC1CA,KAAK,CAACjC,UAAU,KAAKuB,OAAO,CAACvB,UAC/B,CAAC;QACH;QAEA,IAAIuB,OAAO,CAACtB,MAAM,EAAE;UAClB8B,cAAc,GAAGA,cAAc,CAACC,MAAM,CAACC,KAAK,IAC1CA,KAAK,CAAChC,MAAM,KAAKsB,OAAO,CAACtB,MAC3B,CAAC;QACH;;QAEA;QACA,MAAMiC,QAAQ,GAAG,CAAC;QAClB,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACN,cAAc,CAACO,MAAM,GAAGJ,QAAQ,CAAC;QAC9D,MAAMK,UAAU,GAAG,CAACrC,IAAI,GAAG,CAAC,IAAIgC,QAAQ;QACxC,MAAMM,QAAQ,GAAGD,UAAU,GAAGL,QAAQ;QACtC,MAAMO,eAAe,GAAGV,cAAc,CAACW,KAAK,CAACH,UAAU,EAAEC,QAAQ,CAAC;QAElEf,OAAO,CAAC;UACNT,OAAO,EAAE,IAAI;UACbmB,UAAU;UACVQ,WAAW,EAAEzC,IAAI;UACjB0C,IAAI,EAAEH;QACR,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,GAAGL,IAAI,CAACS,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;AACF;;AAEA;AAxJapD,UAAU,CACGY,QAAQ,GAAG,cAAc;AAwJnD,OAAO,MAAMyC,YAAY,CAAC;EACxB;EACA,OAAOC,UAAUA,CAACC,UAAkB,EAAU;IAC5C,MAAMlD,IAAI,GAAG,IAAImD,IAAI,CAACD,UAAU,CAAC;IACjC,OAAOlD,IAAI,CAACoD,kBAAkB,CAAC,OAAO,EAAE;MACtCC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,SAAS;MAChBC,GAAG,EAAE;IACP,CAAC,CAAC,CAAC/C,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC1C;;EAEA;EACA,OAAOgD,eAAeA,CAACzB,SAAiB,EAAU;IAChD,MAAM/B,IAAI,GAAG,IAAImD,IAAI,CAACpB,SAAS,CAAC;IAChC,OAAO/B,IAAI,CAACyD,cAAc,CAAC,OAAO,EAAE;MAClCJ,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,SAAS;MAChBC,GAAG,EAAE,SAAS;MACdG,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACV,CAAC,CAAC,CAACrD,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC1C;;EAEA;EACA,OAAOsD,cAAcA,CAAC3D,MAAc,EAAU;IAC5C,QAAQA,MAAM;MACZ,KAAK,MAAM;QACT,OAAO,YAAY;MACrB,KAAK,QAAQ;QACX,OAAO,cAAc;MACvB,KAAK,SAAS;QACZ,OAAO,eAAe;MACxB;QACE,OAAO,cAAc;IACzB;EACF;;EAEA;EACA,OAAO4D,aAAaA,CAAC7D,UAAkB,EAAU;IAC/C,QAAQA,UAAU;MAChB,KAAK,aAAa;QAChB,OAAO,IAAI;MACb,KAAK,UAAU;QACb,OAAO,GAAG;MACZ,KAAK,kBAAkB;QACrB,OAAO,KAAK;MACd;QACE,OAAO,EAAE;IACb;EACF;;EAEA;EACA,OAAO8D,sBAAsBA,CAACC,OAAwB,EAAkB;IACtE,MAAMC,MAAsB,GAAG,EAAE;IACjC,IAAIC,cAAc,GAAG,CAAC;IAEtBC,MAAM,CAACC,OAAO,CAACJ,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAEC,SAAS,CAAC,KAAK;MACzDA,SAAS,CAACF,OAAO,CAAExB,IAAI,IAAK;QAC1B;QACAoB,MAAM,CAACO,IAAI,CAAC;UACV3C,OAAO,EAAE4C,MAAM,CAACP,cAAc,EAAE,CAAC,CAACQ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;UAClD5C,SAAS,EAAEe,IAAI,CAACf,SAAS;UACzB7B,UAAU,EAAE,aAAa;UACzB8B,KAAK,EAAEc,IAAI,CAAC8B,IAAI;UAChBzE,MAAM,EAAE,IAAI,CAAC0E,eAAe,CAAC,aAAa,EAAE/B,IAAI,CAAC8B,IAAI;QACvD,CAAC,CAAC;;QAEF;QACAV,MAAM,CAACO,IAAI,CAAC;UACV3C,OAAO,EAAE4C,MAAM,CAACP,cAAc,EAAE,CAAC,CAACQ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;UAClD5C,SAAS,EAAEe,IAAI,CAACf,SAAS;UACzB7B,UAAU,EAAE,UAAU;UACtB8B,KAAK,EAAEc,IAAI,CAACgC,GAAG;UACf3E,MAAM,EAAE,IAAI,CAAC0E,eAAe,CAAC,UAAU,EAAE/B,IAAI,CAACgC,GAAG;QACnD,CAAC,CAAC;;QAEF;QACAZ,MAAM,CAACO,IAAI,CAAC;UACV3C,OAAO,EAAE4C,MAAM,CAACP,cAAc,EAAE,CAAC,CAACQ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;UAClD5C,SAAS,EAAEe,IAAI,CAACf,SAAS;UACzB7B,UAAU,EAAE,kBAAkB;UAC9B8B,KAAK,EAAEc,IAAI,CAACiC,GAAG;UACf5E,MAAM,EAAE,IAAI,CAAC0E,eAAe,CAAC,kBAAkB,EAAE/B,IAAI,CAACiC,GAAG;QAC3D,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,OAAOb,MAAM,CAACc,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAI/B,IAAI,CAAC+B,CAAC,CAACnD,SAAS,CAAC,CAACoD,OAAO,CAAC,CAAC,GAAG,IAAIhC,IAAI,CAAC8B,CAAC,CAAClD,SAAS,CAAC,CAACoD,OAAO,CAAC,CAAC,CAAC;EACjG;;EAEA;EACA,OAAeN,eAAeA,CAAC3E,UAAkB,EAAE8B,KAAa,EAAiC;IAC/F,QAAQ9B,UAAU;MAChB,KAAK,aAAa;QAChB,IAAI8B,KAAK,GAAG,EAAE,IAAIA,KAAK,GAAG,EAAE,EAAE,OAAO,SAAS;QAC9C,IAAIA,KAAK,GAAG,EAAE,IAAIA,KAAK,GAAG,EAAE,EAAE,OAAO,QAAQ;QAC7C,OAAO,MAAM;MAEf,KAAK,UAAU;QACb,IAAIA,KAAK,GAAG,EAAE,IAAIA,KAAK,GAAG,EAAE,EAAE,OAAO,SAAS;QAC9C,IAAIA,KAAK,GAAG,EAAE,IAAIA,KAAK,GAAG,EAAE,EAAE,OAAO,QAAQ;QAC7C,OAAO,MAAM;MAEf,KAAK,kBAAkB;QACrB,IAAIA,KAAK,GAAG,IAAI,EAAE,OAAO,SAAS;QAClC,IAAIA,KAAK,GAAG,GAAG,EAAE,OAAO,QAAQ;QAChC,OAAO,MAAM;MAEf;QACE,OAAO,QAAQ;IACnB;EACF;;EAEA;EACA,OAAOoD,kBAAkBA,CAACpF,IAAU,EAAU;IAC5C,MAAMqD,IAAI,GAAGrD,IAAI,CAACqF,WAAW,CAAC,CAAC;IAC/B,MAAM/B,KAAK,GAAGoB,MAAM,CAAC1E,IAAI,CAACsF,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACX,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMpB,GAAG,GAAGmB,MAAM,CAAC1E,IAAI,CAACuF,OAAO,CAAC,CAAC,CAAC,CAACZ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnD,OAAO,GAAGtB,IAAI,IAAIC,KAAK,IAAIC,GAAG,EAAE;EAClC;;EAEA;EACA,OAAOiC,iBAAiBA,CAACtC,UAAkB,EAAQ;IACjD,MAAM,CAACG,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGL,UAAU,CAACuC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IAC5D,OAAO,IAAIxC,IAAI,CAACE,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;EACvC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}